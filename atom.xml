<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wishlily&#39;s blog</title>
  
  
  <link href="https://wishlily.github.io/atom.xml" rel="self"/>
  
  <link href="https://wishlily.github.io/"/>
  <updated>2020-09-17T07:30:00.000Z</updated>
  <id>https://wishlily.github.io/</id>
  
  <author>
    <name>Wishlily</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VBox 镜像迁移 QEMU</title>
    <link href="https://wishlily.github.io/article/tools/2020/09/17/vbox-img-to-qemu/"/>
    <id>https://wishlily.github.io/article/tools/2020/09/17/vbox-img-to-qemu/</id>
    <published>2020-09-17T07:30:00.000Z</published>
    <updated>2020-09-17T07:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>电脑重装不想再安装 vbox，试试 qume 能不能使用原来的镜像。</p><span id="more"></span><p>找到原来镜像路径，我的镜像文件名是 <code>centos-disk001.vdi</code>，将其转换为 <code>img</code>：</p><pre><code class="hljs">qemu-img convert -f vdi -O raw centos-disk001.vdi centos.img</code></pre><p>尝试使用 qemu 启动：</p><pre><code class="hljs">qemu-system-x86_64 -m 2048 -boot d -enable-kvm -smp 3 -hda centos.img -net nic</code></pre><p>启动会自动弹出 qemu 窗口，查看是否能正常登录。</p><p>修改镜像在终端中启动，先拷贝出镜像中内核，位置一般在 <code>/boot</code> 目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls /boot/</span><br>config-3.10.0-1062.4.1.el7.x86_64<br>efi<br>grub<br>grub2<br>initramfs-0-rescue-64fdeb4a6b984cc8a60bbd21fea1cd3c.img<br>initramfs-3.10.0-1062.4.1.el7.x86_64.img<br>initramfs-3.10.0-1062.4.1.el7.x86_64kdump.img<br>initrd-plymouth.img<br>symvers-3.10.0-1062.4.1.el7.x86_64.gz<br>System.map-3.10.0-1062.4.1.el7.x86_64<br>vmlinuz-0-rescue-64fdeb4a6b984cc8a60bbd21fea1cd3c<br>vmlinuz-3.10.0-1062.4.1.el7.x86_64<br></code></pre></td></tr></table></figure><p>我的拷贝出 <code>vmlinuz-3.10.0-1062.4.1.el7.x86_64</code> 和 <code>initramfs-3.10.0-1062.4.1.el7.x86_64.img</code> 即可，<br>然后查看镜像 root 位置，在启动按 <code>e</code> 可查看引导信息：<code>root=/dev/mapper/centos-root</code>，<br>修改启动为：</p><pre><code class="hljs">qemu-system-x86_64 -kernel vmlinuz-3.10.0-1062.4.1.el7.x86_64 -initrd initramfs-3.10.0-1062.4.1.el7.x86_64.img -append &quot;root=/dev/mapper/centos-root console=ttyS0 selinux=0&quot; -m 2048 -enable-kvm -smp 3 -hda centos.img -nographic -net nic</code></pre><p>修改网络<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>最后启动脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Source function library.</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$EUID</span> -ne 0 ]]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> ONLY ROOT CAN ACCESS<br><span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">function</span>  <span class="hljs-function"><span class="hljs-title">up_br0</span></span>() &#123;<br>    ifconfig enp0s25 down               <span class="hljs-comment"># 首先关闭宿主机网卡接口</span><br>    brctl addbr br0                     <span class="hljs-comment"># 添加一座名为 br0 的网桥</span><br>    brctl addif br0 enp0s25             <span class="hljs-comment"># 在 br0 中添加一个接口</span><br>    brctl stp br0 off                   <span class="hljs-comment"># 如果只有一个网桥，则关闭生成树协议</span><br>    brctl setfd br0 1                   <span class="hljs-comment"># 设置 br0 的转发延迟</span><br>    brctl sethello br0 1                <span class="hljs-comment"># 设置 br0 的 hello 时间</span><br>    ifconfig br0 0.0.0.0 promisc up     <span class="hljs-comment"># 启用 br0 接口</span><br>    ifconfig enp0s25 0.0.0.0 promisc up <span class="hljs-comment"># 启用网卡接口</span><br>    dhclient br0                        <span class="hljs-comment"># 从 dhcp 服务器获得 br0 的 IP 地址</span><br>    dhclient enp0s25<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">up_tap0</span></span>() &#123;<br>    tunctl -t tap0 -u root              <span class="hljs-comment"># 创建一个 tap0 接口，只允许 root 用户访问</span><br>    brctl addif br0 tap0                <span class="hljs-comment"># 在虚拟网桥中增加一个 tap0 接口</span><br>    ifconfig tap0 0.0.0.0 promisc up    <span class="hljs-comment"># 启用 tap0 接口</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">clear</span></span>() &#123;<br>    ifconfig tap0 down<br>    brctl delif br0 tap0<br>    tunctl -d tap0<br>    ifconfig enp0s25 down<br>    ifconfig br0 down<br>    brctl delif br0 enp0s25<br>    brctl delbr br0<br>    ifconfig enp0s25 up<br>&#125;<br><br><span class="hljs-built_in">trap</span> clear EXIT INT TERM<br><br>up_br0<br>up_tap0<br><br>qemu-system-x86_64 -kernel vmlinuz-3.10.0-1062.4.1.el7.x86_64 -initrd initramfs-3.10.0-1062.4.1.el7.x86_64.img -append <span class="hljs-string">&quot;root=/dev/mapper/centos-root console=ttyS0 selinux=0&quot;</span> -m 2048 -enable-kvm -smp 3 -hda centos.img -nographic -net nic -net tap,ifname=tap0,script=no,downscript=no<br></code></pre></td></tr></table></figure><p>PS：退出 console 使用快捷键 <code>Ctrl+A</code> 再按 <code>X</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://wzt.ac.cn/2019/09/10/QEMU-networking/">QEMU 网络配置</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;电脑重装不想再安装 vbox，试试 qume 能不能使用原来的镜像。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://wishlily.github.io/categories/tools/"/>
    
    
    <category term="vbox" scheme="https://wishlily.github.io/tags/vbox/"/>
    
    <category term="qemu" scheme="https://wishlily.github.io/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>JUnit 测试之邪门歪道</title>
    <link href="https://wishlily.github.io/article/code/2020/09/15/junit-test/"/>
    <id>https://wishlily.github.io/article/code/2020/09/15/junit-test/</id>
    <published>2020-09-15T02:13:00.000Z</published>
    <updated>2020-09-15T02:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java 单元测试一般使用 JUnit，但是总有些接口测试不便，需要特殊操作，当然可能如下方法并不被提倡，只作不时之需。</p><span id="more"></span><h1 id="生成临时测试文件"><a href="#生成临时测试文件" class="headerlink" title="生成临时测试文件"></a>生成临时测试文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// tmp- 开头后接随机数字的 txt 文件，文件位置在 test 文件下</span><br>f = File.createTempFile(<span class="hljs-string">&quot;tmp-&quot;</span>, <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;test&quot;</span>));<br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(f));<br>out.write(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>out.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 退出时删除文件</span><br>f.deleteOnExit();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Properties-设置"><a href="#Properties-设置" class="headerlink" title="Properties 设置"></a>Properties 设置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>props.setProperty(<span class="hljs-string">&quot;XXXX&quot;</span>, <span class="hljs-string">&quot;/xxx/xxx/xxx.properties&quot;</span>);<br>System.setProperties(props);<br></code></pre></td></tr></table></figure><h1 id="解除保护重新加载"><a href="#解除保护重新加载" class="headerlink" title="解除保护重新加载"></a>解除保护重新加载</h1><p>有时测试需要重新加载 static 方法，可使用反射办到，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需要测试或使用的类</span><br><span class="hljs-type">ObjectXXX</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectXXX</span>();<br>Method methods[] = ObjectXXX.class.getDeclaredMethods();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; methods.length; i++) &#123;<br><span class="hljs-comment">// 需要调用的方法名 XXX</span><br><span class="hljs-keyword">if</span> (methods[i].getName().equals(<span class="hljs-string">&quot;XXX&quot;</span>)) &#123;<br><span class="hljs-comment">// 如果该方法是 private 或者 protected 无法调用，设置为 true 即可解除保护</span><br>methods[i].setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 调用该方法</span><br>methods[i].invoke(c, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java 单元测试一般使用 JUnit，但是总有些接口测试不便，需要特殊操作，当然可能如下方法并不被提倡，只作不时之需。&lt;/p&gt;</summary>
    
    
    
    <category term="code" scheme="https://wishlily.github.io/categories/code/"/>
    
    
    <category term="junit" scheme="https://wishlily.github.io/tags/junit/"/>
    
    <category term="java" scheme="https://wishlily.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Too Many Open files</title>
    <link href="https://wishlily.github.io/article/fixbug/2020/04/19/java_ulimit/"/>
    <id>https://wishlily.github.io/article/fixbug/2020/04/19/java_ulimit/</id>
    <published>2020-04-19T03:22:42.000Z</published>
    <updated>2020-04-19T03:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现了一个历史 bug，挺有意思，记录一下。</p><span id="more"></span><p>环境：JDK7<br>系统：CentOS<br>现象：长时间运行后程序无响应</p><p>开始我怀疑是不是哪里死锁了，找了一圈也没有发现问题；<br>后来再次出现该问题时尝试使用 jstack 查看当前状态，然而出现以下信息：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Unable <span class="hljs-built_in">to</span> <span class="hljs-built_in">open</span> <span class="hljs-built_in">socket</span> <span class="hljs-built_in">file</span>: target <span class="hljs-built_in">process</span> <span class="hljs-keyword">not</span> responding <span class="hljs-keyword">or</span> HotSpot VM <span class="hljs-keyword">not</span> loaded<br>The -F option can be used when <span class="hljs-keyword">the</span> target <span class="hljs-built_in">process</span> is <span class="hljs-keyword">not</span> responding<br></code></pre></td></tr></table></figure><p>再次加上 <code>-F</code> 参数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: Unable to deduce type of thread from <span class="hljs-selector-tag">address</span> <span class="hljs-number">0</span>x00007fb1f430f000 (expected type JavaThread, CompilerThread, ServiceThread, JvmtiAgentThread, or SurrogateLockerThread)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.Threads</span><span class="hljs-selector-class">.createJavaThreadWrapper</span>(Threads<span class="hljs-selector-class">.java</span>:<span class="hljs-number">166</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.Threads</span><span class="hljs-selector-class">.first</span>(Threads<span class="hljs-selector-class">.java</span>:<span class="hljs-number">150</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.DeadlockDetector</span><span class="hljs-selector-class">.createThreadTable</span>(DeadlockDetector<span class="hljs-selector-class">.java</span>:<span class="hljs-number">149</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.DeadlockDetector</span><span class="hljs-selector-class">.print</span>(DeadlockDetector<span class="hljs-selector-class">.java</span>:<span class="hljs-number">56</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.runtime</span><span class="hljs-selector-class">.DeadlockDetector</span><span class="hljs-selector-class">.print</span>(DeadlockDetector<span class="hljs-selector-class">.java</span>:<span class="hljs-number">39</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.tools</span><span class="hljs-selector-class">.StackTrace</span><span class="hljs-selector-class">.run</span>(StackTrace<span class="hljs-selector-class">.java</span>:<span class="hljs-number">62</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.tools</span><span class="hljs-selector-class">.StackTrace</span><span class="hljs-selector-class">.run</span>(StackTrace<span class="hljs-selector-class">.java</span>:<span class="hljs-number">45</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.tools</span><span class="hljs-selector-class">.JStack</span><span class="hljs-selector-class">.run</span>(JStack<span class="hljs-selector-class">.java</span>:<span class="hljs-number">66</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.tools</span><span class="hljs-selector-class">.Tool</span><span class="hljs-selector-class">.startInternal</span>(Tool<span class="hljs-selector-class">.java</span>:<span class="hljs-number">260</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.tools</span><span class="hljs-selector-class">.Tool</span><span class="hljs-selector-class">.start</span>(Tool<span class="hljs-selector-class">.java</span>:<span class="hljs-number">223</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.tools</span><span class="hljs-selector-class">.Tool</span><span class="hljs-selector-class">.execute</span>(Tool<span class="hljs-selector-class">.java</span>:<span class="hljs-number">118</span>)<br>    at sun<span class="hljs-selector-class">.jvm</span><span class="hljs-selector-class">.hotspot</span><span class="hljs-selector-class">.tools</span><span class="hljs-selector-class">.JStack</span><span class="hljs-selector-class">.main</span>(JStack<span class="hljs-selector-class">.java</span>:<span class="hljs-number">92</span>)<br>    at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke0</span>(Native Method)<br>    at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.NativeMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(NativeMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">62</span>)<br>    at sun<span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.DelegatingMethodAccessorImpl</span><span class="hljs-selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">43</span>)<br>    at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>(Method<span class="hljs-selector-class">.java</span>:<span class="hljs-number">498</span>)<br>    at sun<span class="hljs-selector-class">.tools</span><span class="hljs-selector-class">.jstack</span><span class="hljs-selector-class">.JStack</span><span class="hljs-selector-class">.runJStackTool</span>(JStack<span class="hljs-selector-class">.java</span>:<span class="hljs-number">140</span>)<br>    at sun<span class="hljs-selector-class">.tools</span><span class="hljs-selector-class">.jstack</span><span class="hljs-selector-class">.JStack</span><span class="hljs-selector-class">.main</span>(JStack<span class="hljs-selector-class">.java</span>:<span class="hljs-number">106</span>)<br>...<br></code></pre></td></tr></table></figure><p>完全无法查看到任何有用的信息。<br>开始怀疑是不是有内存泄露，然而 JAVA 是存在自动回收机制的，这要排查哪里的问题似乎不太容易。<br>后来在 LOG 输出中发现了一条错误：<code>Too Many Open files error</code>，很多打开文件操作都出现了这个错误，那就是有文件没有正确关闭了？</p><p>一般运行的程序都有一个 <code>Max open files</code> 的最大限制<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tcl">$ cat /<span class="hljs-keyword">proc</span>/PID/limits<span class="hljs-title"></span><br><span class="hljs-title">Limit</span> <span class="hljs-title">                    Soft</span> Limit<span class="hljs-title">           Hard</span> Limit<span class="hljs-title">           Units</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> cpu<span class="hljs-title"> time</span> <span class="hljs-title">             unlimited</span> <span class="hljs-title">           unlimited</span> <span class="hljs-title">           seconds</span> <span class="hljs-title">  </span><br><span class="hljs-title">Max</span> file<span class="hljs-title"> size</span> <span class="hljs-title">            unlimited</span> <span class="hljs-title">           unlimited</span> <span class="hljs-title">           bytes</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> data<span class="hljs-title"> size</span> <span class="hljs-title">            unlimited</span> <span class="hljs-title">           unlimited</span> <span class="hljs-title">           bytes</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> stack<span class="hljs-title"> size</span>            8388608<span class="hljs-title">              unlimited</span> <span class="hljs-title">           bytes</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> core<span class="hljs-title"> file</span> size        0<span class="hljs-title">                    unlimited</span> <span class="hljs-title">           bytes</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> resident<span class="hljs-title"> set</span> <span class="hljs-title">         unlimited</span> <span class="hljs-title">           unlimited</span> <span class="hljs-title">           bytes</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> processes             63177                63177<span class="hljs-title">                processes</span> <span class="hljs-title"></span><br><span class="hljs-title">Max</span> open<span class="hljs-title"> files</span>            8192                 1048576<span class="hljs-title">              files</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> locked<span class="hljs-title"> memory</span>         16777216             16777216<span class="hljs-title">             bytes</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> address<span class="hljs-title"> space</span> <span class="hljs-title">        unlimited</span> <span class="hljs-title">           unlimited</span> <span class="hljs-title">           bytes</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> file<span class="hljs-title"> locks</span> <span class="hljs-title">           unlimited</span> <span class="hljs-title">           unlimited</span> <span class="hljs-title">           locks</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> pending<span class="hljs-title"> signals</span>       63177                63177<span class="hljs-title">                signals</span> <span class="hljs-title">  </span><br><span class="hljs-title">Max</span> msgqueue<span class="hljs-title"> size</span>         819200               819200<span class="hljs-title">               bytes</span> <span class="hljs-title">    </span><br><span class="hljs-title">Max</span> nice<span class="hljs-title"> priority</span>         0                    0<span class="hljs-title">                    </span><br><span class="hljs-title">Max</span> realtime<span class="hljs-title"> priority</span>     0                    0<span class="hljs-title">                    </span><br><span class="hljs-title">Max</span> realtime<span class="hljs-title"> timeout</span> <span class="hljs-title">     unlimited</span> <span class="hljs-title">           unlimited</span> <span class="hljs-title">           us</span><br></code></pre></td></tr></table></figure><p>当超出当前限制，程序将无法申请打开任何新的句柄。那么如何查看当前已经使用了多少资源呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> -la /proc/PID/fd</span><br></code></pre></td></tr></table></figure><p>不看不知道一看吓一跳，原来程序中有很多 <code>socket</code> 连接，后来发现其中网络部分有连接使用完没有正确 <code>close</code>，就是这样一个小疏忽，最终造成程序死机。</p><p>最后一个没有用到的，我现在怀疑 jstack 报错可能和这个也有关系，如果临时调整 <code>Max open files</code> 参数是不是可以解决这个报错呢？<br>查找到可以使用以下命令动态调整进程限制文件数量：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">prlimit -nNUM -<span class="hljs-selector-tag">p</span> PID<br></code></pre></td></tr></table></figure><p>总结：程序稳定性测试时候也应该多多使用 jstack &amp; limits，查看一下长时间运行后有没有不停增加的线程及文件，因为这种问题不是那么容易暴露的。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.ibm.com/support/pages/resolve-too-many-open-files-error-and-native-outofmemory-due-failed-create-thread-issues-websphere-application-server-running-linux">Resolve &quot;Too Many Open files error&quot; issues in WebSphere Application Server running on Linux</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近发现了一个历史 bug，挺有意思，记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="fixbug" scheme="https://wishlily.github.io/categories/fixbug/"/>
    
    
    <category term="java" scheme="https://wishlily.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker 使用</title>
    <link href="https://wishlily.github.io/article/tools/2019/08/14/docker-apply/"/>
    <id>https://wishlily.github.io/article/tools/2019/08/14/docker-apply/</id>
    <published>2019-08-14T03:40:35.000Z</published>
    <updated>2021-02-23T06:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 前几年为了配置数据库接触过一次，仅限于 <code>run</code> &amp; <code>start</code> 之类。<br>今天详细看看官方文档，记录一下。</p><span id="more"></span><h1 id="安装1"><a href="#安装1" class="headerlink" title="安装1"></a>安装<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h1><p>我使用的系统是 CentOS，内核版本 <code>3.10.0-957.el7.x86_64</code>：</p><ol><li><p>卸载旧版本</p><pre><code class="hljs"> yum remove docker \            docker-client \            docker-client-latest \            docker-common \            docker-latest \            docker-latest-logrotate \            docker-logrotate \            docker-engine</code></pre></li><li><p>安装存储库及依赖包</p><pre><code class="hljs"> yum install -y yum-utils \                device-mapper-persistent-data \                lvm2 yum-config-manager \                --add-repo \                https://download.docker.com/linux/centos/docker-ce.repo</code></pre></li><li><p>安装最新版 Docker</p><pre><code class="hljs"> yum install docker-ce docker-ce-cli containerd.io</code></pre></li><li><p>检查版本</p><pre><code class="hljs"> docker --version</code></pre></li><li><p>启动</p><pre><code class="hljs"> systemctl start docker docker info</code></pre></li></ol><h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><p>列出镜像容器等</p><pre><code class="hljs">docker image lsdocker container ls -adocker volume ls</code></pre><blockquote><p>这些信息也可以查看 <code>/var/lib/docker</code> 文件夹</p></blockquote><p>删除</p><pre><code class="hljs">docker container rm [CONTAINER ID]</code></pre><blockquote><p>这类指令规律都是相似的</p></blockquote><p>这里我遇到一个问题，<code>ls</code> 显示镜像，但是无法 <code>rm</code>，会提示 <code>Error: No such image</code>；<br>好像是之前残留的问题，如果没有重要的文件可以如下解决：</p><pre><code class="hljs">systemctl stop dockerrm -rf /var/lib/dockersystemctl start docker</code></pre><p>排错</p><p>有时需要查看 log 方便排错<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><pre><code class="hljs">docker logs [OPTIONS] CONTAINER</code></pre><p>OPTIONS</p><ul><li><code>-f</code>：跟踪日志输出</li><li><code>--since</code>：显示某个开始时间的所有日志</li><li><code>-t</code>：显示时间戳</li><li><code>--tail</code>：仅列出最新 N 条容器日志</li></ul><h2 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h2><p>启动新系统容器并连接到当前 <code>bash</code>：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># docker run -it debian:stable /bin/bash</span><br>root<span class="hljs-variable">@xxxx</span><span class="hljs-symbol">:/</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>退出重新连接容器：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># docker exec -it xxxx /bin/bash</span><br>root<span class="hljs-variable">@xxxx</span><span class="hljs-symbol">:/</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h1 id="构建3"><a href="#构建3" class="headerlink" title="构建3"></a>构建<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>官网有完整的例子，使用 <code>Dockerfile</code> 构建一个自己的镜像，一般注意如下：</p><ul><li>尽量使用别人已经构建好的镜像<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></li><li>尽量减少层（layer），我如果理解没错，官方例子是七层</li></ul><p>将容器中位置绑定到当前目录<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><pre><code class="hljs">docker run -p 4000:80 --mount type=bind,source=&quot;$(pwd)&quot;,target=/home/logs/ hello:v1</code></pre><p>关于存储可查看 <a href="https://docs.docker.com/storage/">Manage data in Docker</a>：</p><ul><li>Volumes：存储在 <code>/var/lib/docker/volumes/</code></li><li>Bind mounts：可绑定本机</li><li>tmpfs mounts：仅存储在内存中</li></ul><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p>启动服务感觉比 <code>run</code> 更高级一层，可以执行更复杂的配置，比如定义 CPU 占用率等</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>使用 docker 本地配置一个 mysql 数据库<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"># 拉取最新镜像<br>docker pull mariadb<br># 拉取指定版本镜像<br>docker pull mariadb:<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span><br></code></pre></td></tr></table></figure><p>数据库保存到本地，文件结构如下：</p><ul><li>test<ul><li>docker-compose.yml</li><li>mysql</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># docker-compose.yml</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mariadb:x.x.x</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">db-test</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql:/var/lib/mysql</span> <span class="hljs-comment"># 容器中数据保存在本地指定文件夹下</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=111111</span> <span class="hljs-comment"># 配置数据库密码</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span> <span class="hljs-comment"># 将容器端口引出，前者表示本机端口</span><br></code></pre></td></tr></table></figure><p>在 <code>test</code> 文件夹下编译容器：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> docker<span class="hljs-literal">-compose</span>.yml up<br></code></pre></td></tr></table></figure><p>数据库导入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 从其他数据库导出全部数据</span><br>mysqldump -uroot -p --databases xxx &gt; <span class="hljs-regexp">/xxx/</span>xxx/backup.sql<br><span class="hljs-comment"># 把文件考入到 docker 中</span><br>docker cp <span class="hljs-regexp">/xxx/</span>xxx<span class="hljs-regexp">/backup.sql db-test:/</span>backup.sql<br><span class="hljs-comment"># 进入 docker 导入数据</span><br>docker exec -it db-test bash<br>mysql -uroot -p &lt; backup.sql<br></code></pre></td></tr></table></figure><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://docs.docker.com/install/">Docker Engine</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.runoob.com/docker/docker-logs-command.html">Docker logs 命令</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://docs.docker.com/get-started/part2/">Dockerfile</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://hub.docker.com">dockerhub</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.runoob.com/docker/docker-run-command.html">Docker run 命令说明</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.dazhuanlan.com/2019/12/13/5df3acf0a354e/">Docker系列之实战：3.安装MariaDB</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 前几年为了配置数据库接触过一次，仅限于 &lt;code&gt;run&lt;/code&gt; &amp;amp; &lt;code&gt;start&lt;/code&gt; 之类。&lt;br&gt;今天详细看看官方文档，记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://wishlily.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>VSCode</title>
    <link href="https://wishlily.github.io/article/tools/2019/06/13/VSCode/"/>
    <id>https://wishlily.github.io/article/tools/2019/06/13/VSCode/</id>
    <published>2019-06-13T03:11:19.000Z</published>
    <updated>2020-11-06T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>从 Sublime 投入 VSCode 怀抱。<br>自己一些常用插件配置。</p><span id="more"></span><p><strong>linux 下在终端打开文件</strong></p><pre><code class="hljs">code /xxx/xxx/xxx.xxx</code></pre><p><strong>屏蔽某些文件或文件夹</strong></p><pre><code class="hljs">&#123; // settings.json    &quot;files.watcherExclude&quot;: &#123;        &quot;**/vendor/**&quot;: true    &#125;,    &quot;files.exclude&quot;: &#123;        &quot;bin&quot;: true,        &quot;pkg&quot;: true    &#125;&#125;</code></pre><p><strong>添加自定义环境变量</strong></p><pre><code class="hljs">&#123; // settings.json    &quot;terminal.integrated.env.linux&quot;: &#123; // or osx/windows        &quot;MY_ENV&quot;: &quot;xxx&quot;    &#125;,&#125;</code></pre><p>以上设置好了重启 vscode 在终端中 <code>echo $MY_ENV</code> 就会看到设置的数据了</p><p><strong>工作空间及任务</strong><br>有时一个工程需要多个部分配合，但是又不想开很多个窗口，这时可以使用工作空间将其整合到一起。但是这时又有个问题是 task（任务）怎么统一使用一个呢，比如统一编译什么的，目前解决方法是再建立一个文件夹到工作空间，里面写脚本实现，大致如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// tasks.json</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;linux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/xxx/xxx/xxx&quot;</span> <span class="hljs-comment">// 实现脚本路径</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// task 标签</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;build&quot;</span> <span class="hljs-comment">// 脚本参数</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;isBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clean&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;clean&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;isBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>脚本中各个工程路径可以从 <code>xxx.code-workspace</code> 工作空间配置中获取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">function path()<br>&#123;<br>    echo `cat .vscode/workspace.code-workspace | grep $1 | awk &#x27;&#123;print $2&#125;&#x27; | sed &#x27;s/\&quot;//g&#x27;`<br>&#125;<br>MYPROJ=`path XXX` // 获得路径<br></code></pre></td></tr></table></figure><h1 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h1><ul><li>Settings Sync：同步备份插件及用户设置到 github，方便恢复</li><li>Chinese (Simplified) Language Pack for Visual Studio Code：对于英语渣来说还是很有必要的</li><li>TODO Highlight：代码中 <code>TODO</code> 会被高亮</li><li>vscode-icons：好看</li></ul><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>一般直接使用自带的或者命令行，感觉还可以，挺方便的。</p><ul><li>GitLens：可以直接看到每行代码是什么时候谁写的（<del>公开处刑</del>）</li></ul><h2 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h2><ul><li>Markdown All in One</li><li>Markdown Preview Enhanced：预览结果</li></ul><h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><p>现在我的 golang 基本都是在 VSCode 上开发了。</p><ul><li>Go：需要下载一堆插件准备好 VPN 吧</li></ul><p>在 linux 中交叉编译 wins</p><pre><code class="hljs">env GOOS=windows GOARCH=amd64 go get -u -v github.com/xxx/xxx</code></pre><p>在 wins 中交叉编译 linux</p><pre><code class="hljs">CGO_ENABLED=0 // 坏境变量中配置GOOS=linuxGOARCH=amd64</code></pre><p>工程单独配置 <code>settings.json</code></p><pre><code class="hljs">&#123;    &quot;go.goroot&quot;: &quot;c:\\Go&quot;,    &quot;go.gopath&quot;: &quot;d:\\GitLib\\Golang;$&#123;workspaceRoot&#125;&quot;, // 多个路径    &quot;go.toolsEnvVars&quot;: &#123;        &quot;GO111MODULE&quot;: &quot;on&quot;, // 设置 go 环境变量        &quot;CGO_ENABLED&quot;: 0,        &quot;GOOS&quot;: &quot;linux&quot;,        &quot;GOARCH&quot;: &quot;amd64&quot;,    &#125;,    &quot;files.exclude&quot;: &#123;        &quot;**/vendor/**&quot;: true    &#125;,    &quot;files.watcherExclude&quot;: &#123;        &quot;**/vendor/**&quot;: true    &#125;&#125;</code></pre><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>还没有真的在这上编译 C 代码，不过之前都是使用 Sublime，这个应该更好用的吧。</p><ul><li>C&#x2F;C++</li></ul><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><p>这部分也没有怎么使用过，网上有详细的说明<a href="https://code.visualstudio.com/docs/java/java-tutorial">文档</a>，只要打开一个 java 文件，会自动建议你安装一些插件。</p><ul><li>Language support for Java ™ for Visual Studio Code</li><li>Java Extension Pack</li><li>Java Dependency Viewer</li><li>Debugger for Java</li><li>Java Test Runner</li><li>Maven for Java</li></ul><p><strong>新建一个工程</strong>：<code>Ctrl+P</code> 打开控制台，输入 <code>&gt;Crea</code>，选择 <code>Java: Create Java Project</code>。</p><blockquote><p>我尝试的时候例子怎么都无法运行，报「找不到或无法加载主类 App」，后来发现是因为路径问题，这个文件我在虚拟机共享文件夹下建的，路径包括 <code>\\192.168.xx.xx\...</code>。</p></blockquote><p><strong>添加 lib</strong>：<code>.classpath</code> 中添加 <code>&lt;classpathentry kind=&quot;lib&quot; path=&quot;xxx/xxx.jar&quot;/&gt;</code></p><blockquote><p>只能一个包一个包添加</p></blockquote><p><strong>设置不同的版本</strong>：插件目前只能在 JDK11 以上才能运行，那么老的工程怎么使用呢？<br>在 <code>settings.json</code> 中设置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;java.home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/xxx/jdk-14&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;java.configuration.runtimes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JavaSE-1.7&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/xxx/jdk1.7.0_80/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JavaSE-1.8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/xxx/jdk1.8.0/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>工程中指定某个版本 JDK，在 <code>.classpath</code> 中添加 <code>&lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.x&quot;/&gt;</code></p><blockquote><p>在使用 1.7 时发现一个报错：</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">Access restriction: The type <span class="hljs-string">&#x27;HttpHandler&#x27;</span> <span class="hljs-keyword">is</span> not API (restriction <span class="hljs-keyword">on</span> <span class="hljs-keyword">required</span> <span class="hljs-keyword">library</span> <span class="hljs-string">&#x27;/opt/local/java/jdk1.7.0_80/jre/lib/rt.jar&#x27;</span>)<br></code></pre></td></tr></table></figure><p>解决方法修改 <code>.classpath</code> 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">classpathentry</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;con&quot;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">accessrules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">accessrule</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;accessible&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;com/sun/net/**&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">accessrules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">classpathentry</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>添加 Junit Lib</strong>：<code>.classpath</code> 中添加 <code>&lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.jdt.junit.JUNIT_CONTAINER/4&quot;/&gt;</code></p><blockquote><p>Junit 运行版本报错的话，需要修改 <code>runtimes</code> 配置 <code>default</code> 版本与当前一致即可</p></blockquote><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p><strong>使用 maven 新建一个工程</strong>：</p><ol><li>先设置工具路径 <code>&quot;maven.executable.path&quot;: &quot;C:\\xxx\\mvn&quot;</code></li><li>打开控制台输入 <code>&gt;maven</code>，选择 Generate from Maven Archetype，选择 maven-archetype-quickstart，根据提示输入就行，其中命名规范网上整理的很多<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</li></ol><p>maven 添加自己的 package 方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      ...<br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- plugins section : plugins that are invoked when building the project --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>app<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <span class="hljs-comment">&lt;!-- 多个包 ID --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">outputFile</span>&gt;</span>target/$&#123;project.artifactId&#125;-app-$&#123;project.version&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">outputFile</span>&gt;</span> <span class="hljs-comment">&lt;!-- 打包自定义名字 --&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">minimizeJar</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">minimizeJar</span>&gt;</span> <span class="hljs-comment">&lt;!-- 只打使用的类，未测试过，在 1.7 上没法使用 --&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">artifact</span>&gt;</span>$&#123;project.groupId&#125;:$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">artifact</span>&gt;</span> <span class="hljs-comment">&lt;!-- 过滤自己的代码 --&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>com/wishlily/helloworld/App.**<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">artifact</span>&gt;</span>io.*:*<span class="hljs-tag">&lt;/<span class="hljs-name">artifact</span>&gt;</span> <span class="hljs-comment">&lt;!-- 打包其他库的选择器 --&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                  <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">filters</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>helloworld.App<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span> <span class="hljs-comment">&lt;!-- jar main 入口 --&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br><br>          <span class="hljs-comment">&lt;!-- 还可以添加另一个 jar 包，同上 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>开始怎么在 <code>pluginManagement</code> 中添加 <code>maven-shade-plugin</code> 插件都不能起作用<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p></blockquote><p>maven 添加本地库<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>anything<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>anything<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>anything<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span> <span class="hljs-comment">&lt;!-- 参数为 test 则表示只有测试代码使用 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;basedir&#125;/lib/xxx.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span> <span class="hljs-comment">&lt;!-- jar 所在路径，basedir 即 pom.xml 所在目录 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h2><p><strong><code>build.gradle</code> 自定义 url</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">repositories &#123;<br>    maven &#123; url <span class="hljs-string">&quot;$&#123;nexusUrl&#125;/repository/xxx/&quot;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>nexusUrl</code> 可以在 <code>gradle.properties</code> 中定义<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">nexusUrl</span>=http://localhost:<span class="hljs-number">8081</span>/nexus<br><span class="hljs-attr">nexusUsername</span>=admin<br><span class="hljs-attr">nexusPassword</span>=admin123<br></code></pre></td></tr></table></figure><p><strong><code>Access restriction: The type &#39;XXX&#39; is not API (/xxx/jre/lib/xx.jar)</code></strong></p><p>如果报类似以上错误，可以在 <code>build.gradle</code> 添加以下插件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">import</span> org.gradle.plugins.ide.eclipse.model.AccessRule<br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;eclipse&#x27;</span><br><br>eclipse &#123;<br>    classpath &#123;<br>        file &#123;<br>            whenMerged &#123;<br>                <span class="hljs-keyword">def</span> jre = entries.find &#123; it.path.contains <span class="hljs-string">&#x27;org.eclipse.jdt.launching.JRE_CONTAINER&#x27;</span> &#125;<br>                jre.accessRules.add(<span class="hljs-keyword">new</span> AccessRule(<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;ssl/**&#x27;</span>)) <span class="hljs-comment">// 忽略部分路径</span><br>                jre.accessRules.add(<span class="hljs-keyword">new</span> AccessRule(<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;com/sun/net/ssl/internal/ssl/**&#x27;</span>))<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.cnblogs.com/EasonJim/p/8411509.html">Maven命名规范收集</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://stackoverflow.com/questions/53918867/pluginmanagement-interferes-with-shade-plugin">pluginManagement interferes with shade plugin</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://jonathangraham.github.io/2016/01/05/Local_Jar_Dependency_With_Maven">Local_Jar_Dependency_With_Maven</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://help.sonatype.com/repomanager2/maven-and-other-build-tools/gradle">Gradle</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;从 Sublime 投入 VSCode 怀抱。&lt;br&gt;自己一些常用插件配置。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://wishlily.github.io/categories/tools/"/>
    
    
    <category term="ide" scheme="https://wishlily.github.io/tags/ide/"/>
    
  </entry>
  
  <entry>
    <title>grpc</title>
    <link href="https://wishlily.github.io/article/bus/2019/06/09/grpc/"/>
    <id>https://wishlily.github.io/article/bus/2019/06/09/grpc/</id>
    <published>2019-06-09T06:01:02.000Z</published>
    <updated>2019-06-09T06:01:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用了一下 grpc 通信，现在整理一下，防止遗忘。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>grpc 可以支持不同的语言，详细可查看 <a href="https://github.com/grpc/">github</a>。<br>这次我主要使用的是 go 和 java，<br>golang 因为墙的关系有几个包需要找镜像下载<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/grpc/grpc-go.git $GOPATH/src/google.golang.org/grpc<br>git clone https://github.com/golang/net.git $GOPATH/src/golang.org/x/net<br>git clone https://github.com/golang/text.git $GOPATH/src/golang.org/x/text<br>git clone https://github.com/golang/sys.git $GOPATH/src/golang.org/x/sys<br>go get -u github.com/golang/protobuf/&#123;proto,protoc-gen-go&#125;<br>git clone https://github.com/google/go-genproto.git $GOPATH/src/google.golang.org/genproto<br>cd $GOPATH/src/<br>go install google.golang.org/grpc<br></code></pre></td></tr></table></figure><p>我看官方也详细写了使用 <code>go mod</code> 的安装方法。</p><span id="more"></span><h2 id="protoc"><a href="#protoc" class="headerlink" title="protoc"></a>protoc</h2><p>这是一个通过 <code>proto</code> 文件，自动生成不同语言代码的工具。<br>github 上可以直接下载 release，地址：<a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a>。<br>比较省事的就是下载编译好的程序，比如我系统是 linux 64，就下载 <code>protoc-x.x.x-linux-x86_64.zip</code>，直接解压放到 <code>PATH</code> 下就行，<code>protoc --veriosn</code> 查看版本。</p><h2 id="protoc-gen-go"><a href="#protoc-gen-go" class="headerlink" title="protoc-gen-go"></a>protoc-gen-go</h2><p>配合 <code>protoc</code> goalng 使用的插件</p><pre><code class="hljs">go get -u github.com/golang/protobuf/&#123;proto,protoc-gen-go&#125;</code></pre><blockquote><p>使用时注意 <code>protoc-gen-go</code> 必须在系统 <code>PATH</code> 中<br><code>export PATH=$PATH:$GOPATH/bin</code></p></blockquote><p>运行以下命令可以自动生成 go 文件</p><pre><code class="hljs">protoc --go_out=plugins=grpc:. *.proto</code></pre><h2 id="protoc-gen-grpc-java"><a href="#protoc-gen-grpc-java" class="headerlink" title="protoc-gen-grpc-java"></a>protoc-gen-grpc-java</h2><p>官方提供的 java 插件，安装下载地址 <a href="https://github.com/grpc/grpc-java/tree/master/compiler">https://github.com/grpc/grpc-java/tree/master/compiler</a></p><blockquote><p>貌似系统 java 1.7 无法编译，应该需要更高的版本，或者下载已经编译好的工具，如 <a href="https://repo1.maven.org/maven2/io/grpc/protoc-gen-grpc-java/1.19.0/">1.19</a></p></blockquote><p>运行以下命令自动生成 java 文件</p><pre><code class="hljs">protoc --java_out=. *.protoprotoc --plugin=protoc-gen-grpc-java=/xxx/xxx/protoc-gen-grpc-java --grpc-java_out=. *.proto</code></pre><blockquote><p>路径根据实际情况修改，java 至少需要 2 个文件</p></blockquote><h1 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h1><p>官方都有给简易例子，以下添加一些说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs proto">syntax = &quot;proto3&quot;;<br><br>option java_multiple_files = false;              // java 文件是否生成多个文件，我直接选择否方便 git 操作<br>option java_package = &quot;com.wishlily.helloworld&quot;; // java 路径<br>option java_outer_classname = &quot;HelloWorldProto&quot;; // java 类名<br><br>package grpc;                                    // golang 包名<br><br>// 通信接口<br>service Greeter &#123;<br>    rpc SayHello(Hello) returns (Null) &#123;&#125;       // 客户端给服务器信息<br>    rpc SayBye(Null) returns (stream Bye) &#123;&#125;    // 可用作服务器回调信息<br>&#125;<br><br>message Null &#123;&#125;             // 即便传输为空也需要一个构造，或者引入官方包中的 google.protobuf.Empty<br><br>message Hello &#123;<br>    string name = 1;<br>    string msg = 2;<br>    int64 num = 3;<br>&#125;<br><br>message Bye &#123;<br>    enum Number &#123;<br>        ONE = 0;<br>        TWO = 1;<br>    &#125;<br>    Number num = 1;<br>    string msg = 2;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="go"><a href="#go" class="headerlink" title="go"></a>go</h1><p>根据官方例子修改如下：</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br>pb <span class="hljs-string">&quot;sayhi/grpc&quot;</span>          <span class="hljs-comment">// protoc-gen-go 生成文件包</span><br><br><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;<br>hi <span class="hljs-type">bool</span><br><br>number <span class="hljs-type">int64</span><br>name   <span class="hljs-type">string</span><br>msg    <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// 客户端 -&gt; 服务器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHello(ctx context.Context, in *pb.Hello) (*pb.Null, <span class="hljs-type">error</span>) &#123;<br>reply := &amp;pb.Null&#123;&#125;<br>s.number = in.GetNum()<br>s.name = in.GetName()<br>s.msg = in.GetMsg()<br>fmt.Printf(<span class="hljs-string">&quot;%d: %s Say %s\n&quot;</span>, s.number, s.name, s.msg)<br>s.hi = <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span> reply, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 服务器 -&gt; 客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayBye(in *pb.Null, stream pb.Greeter_SayByeServer) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> &#123; <span class="hljs-comment">// 此处不退出，会一直在该线路上发送，哪怕连接已断，一定要判断 Send 结果</span><br><span class="hljs-keyword">if</span> s.hi &#123;<br>bye := &amp;pb.Bye&#123;<br>Msg: <span class="hljs-string">&quot;Receive: &quot;</span> + s.msg,<br>&#125;<br><span class="hljs-keyword">if</span> (s.number % <span class="hljs-number">2</span>) == <span class="hljs-number">0</span> &#123;<br>bye.Num = pb.Bye_ONE<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>bye.Num = pb.Bye_TWO<br>&#125;<br><span class="hljs-keyword">if</span> err := stream.Send(bye); err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 服务器主动发起消息</span><br><span class="hljs-keyword">return</span> err <span class="hljs-comment">// Disconnect</span><br>&#125;<br>s.hi = <span class="hljs-literal">false</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>time.Sleep(<span class="hljs-number">100</span> * time.Millisecond)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:10086&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>s := grpc.NewServer()<br>pb.RegisterGreeterServer(s, <span class="hljs-built_in">new</span>(server))<br>fmt.Println(<span class="hljs-string">&quot;Server start ...&quot;</span>)<br><span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>开始接触 grpc 时一直想不明白，服务器怎么主动发起消息，后来明白其实就使用 stream，单方向就一直保持这个 stream 不关闭就行，当然这个连接还是要 client 先发起才行。</p><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>wait := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">1</span>)<br><br>conn, err := grpc.Dial(<span class="hljs-string">&quot;localhost:10086&quot;</span>, grpc.WithInsecure())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br>c := pb.NewGreeterClient(conn)<br><br>name := <span class="hljs-string">&quot;Robyn&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &gt; <span class="hljs-number">1</span> &#123;<br>name = os.Args[<span class="hljs-number">1</span>]<br>&#125;<br>msg := <span class="hljs-string">&quot;Hello&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &gt; <span class="hljs-number">2</span> &#123;<br>msg = os.Args[<span class="hljs-number">2</span>]<br>&#125;<br>num := <span class="hljs-type">int64</span>(<span class="hljs-number">120</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) &gt; <span class="hljs-number">3</span> &#123;<br>n, _ := strconv.Atoi(os.Args[<span class="hljs-number">3</span>])<br>num = <span class="hljs-type">int64</span>(n)<br>&#125;<br><br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br>_, err = c.SayHello(ctx, &amp;pb.Hello&#123;Name: name, Msg: msg, Num: num&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%d: %s Say %s\n&quot;</span>, num, name, msg)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>ctx, cancel := context.WithTimeout(context.Background(), time.Second)<br><span class="hljs-keyword">defer</span> cancel()<br>stream, err := c.SayBye(ctx, &amp;pb.Null&#123;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br>bye, err := stream.Recv()<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Say Bye %v %v\n&quot;</span>, bye.GetNum(), bye.GetMsg())<br><span class="hljs-keyword">break</span><br>&#125;<br>wait &lt;- <span class="hljs-number">0</span><br>&#125;()<br><br>&lt;-wait<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>测试结果如下：</p><p>client</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[root@localhost client]</span># go run main.go<br><span class="hljs-keyword">Say</span> Bye ONE:Receive: Hello<br>120: Robyn <span class="hljs-keyword">Say</span> Hello<br><span class="hljs-comment">[root@localhost client]</span># go run main.go Emily Hi 23<br><span class="hljs-keyword">Say</span> Bye TWO Receive: Hi<br>23: Emily <span class="hljs-keyword">Say</span> Hi<br></code></pre></td></tr></table></figure><p>server</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[root@localhost server]</span># go run main.go<br>Server start ...<br>120: Robyn <span class="hljs-keyword">Say</span> Hello<br>23: Emily <span class="hljs-keyword">Say</span> Hi<br></code></pre></td></tr></table></figure><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><p>首先介绍打包方式：一种是使用 maven，另一种是使用 ant。</p><p>maven 这部分根据官方<a href="https://github.com/grpc/grpc-java/blob/master/examples/pom.xml">例子</a>摘抄</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">grpc.version</span>&gt;</span>1.19.0<span class="hljs-tag">&lt;/<span class="hljs-name">grpc.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.grpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>grpc-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;grpc.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.grpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>grpc-netty-shaded<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.grpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>grpc-protobuf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.grpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>grpc-stub<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ant 就需要提前下载好 jar 包，将这些一起打包到你的包里：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;client&quot;</span> <span class="hljs-attr">depends</span>=<span class="hljs-string">&quot;compile&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mkdir</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;$&#123;prepjar&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">copy</span> <span class="hljs-attr">todir</span>=<span class="hljs-string">&quot;$&#123;prepjar&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fileset</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;$&#123;classes&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">copy</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">jar</span> <span class="hljs-attr">jarfile</span>=<span class="hljs-string">&quot;$&#123;clientjarfilename&#125;&quot;</span> <span class="hljs-attr">basedir</span>=<span class="hljs-string">&quot;$&#123;prepjar&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">attribute</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Main-Class&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.xxx.MainClass&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;**/xxx/**&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">zipgroupfileset</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;$&#123;grpc&#125;&quot;</span> <span class="hljs-attr">includes</span>=<span class="hljs-string">&quot;**/*.jar&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 主要这句拷贝路径下所有 jar --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">jar</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;$&#123;prepjar&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="server-1"><a href="#server-1" class="headerlink" title="server"></a>server</h2><p>服务器首先使用 <code>protoc</code> 工具生成两个文件：<code>GreeterGrpc.java</code> &amp; <code>HelloWorldProto.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">private</span> io.grpc.Server server;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">10086</span>;<br>        server = ServerBuilder.forPort(port).addService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GreeterImpl</span>()).build().start();<br>        System.out.println(<span class="hljs-string">&quot;Server started, listening on 10086&quot;</span>);<br>        Runtime.getRuntime().addShutdownHook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// Use stderr here since the logger may have been reset by its JVM shutdown</span><br>                <span class="hljs-comment">// hook.</span><br>                System.err.println(<span class="hljs-string">&quot;*** shutting down gRPC server since JVM is shutting down&quot;</span>);<br>                Server.<span class="hljs-built_in">this</span>.stop();<br>                System.err.println(<span class="hljs-string">&quot;*** server shut down&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (server != <span class="hljs-literal">null</span>) &#123;<br>            server.shutdown();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">blockUntilShutdown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (server != <span class="hljs-literal">null</span>) &#123;<br>            server.awaitTermination();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreeterImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GreeterImplBase</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">sayHi</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">private</span> Bye bye;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(Hello req, StreamObserver&lt;Null&gt; responseObserver)</span> &#123;<br>            <span class="hljs-type">Null</span> <span class="hljs-variable">reply</span> <span class="hljs-operator">=</span> Null.newBuilder().build();<br><br>            <span class="hljs-type">Number</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Number.ONE;<br>            <span class="hljs-keyword">if</span> (req.getNum() % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                num = Number.TWO;<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getName();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> req.getMsg();<br>            System.out.printf(<span class="hljs-string">&quot;%d: %s Say %s\n&quot;</span>, req.getNum(), name, msg);<br>            bye = Bye.newBuilder().setNum(num).setMsg(<span class="hljs-string">&quot;Get: &quot;</span> + msg).build();<br>            responseObserver.onNext(reply);<br>            responseObserver.onCompleted();<br>            sayHi = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayBye</span><span class="hljs-params">(Null req, StreamObserver&lt;Bye&gt; responseObserver)</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">if</span> (sayHi) &#123;<br>                    sayHi = <span class="hljs-literal">false</span>;<br>                    System.out.printf(<span class="hljs-string">&quot;%s Bye %s\n&quot;</span>, bye.getNum(), bye.getMsg());<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        responseObserver.onNext(bye);<br>                    &#125; <span class="hljs-keyword">catch</span> (StatusRuntimeException e) &#123; <span class="hljs-comment">// 是 grpc 出现错误时抛出异常</span><br>                        System.out.println(e.toString());<br>                        responseObserver.onError(e);     <span class="hljs-comment">// 测试中如果没有 onError | onCompleted，则下一次连接会出现问题</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Server</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Server</span>();<br>        server.start();<br>        server.blockUntilShutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="client-1"><a href="#client-1" class="headerlink" title="client"></a>client</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ManagedChannel channel;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> GreeterGrpc.GreeterBlockingStub blockingStub;<br><br>    <span class="hljs-keyword">private</span> ByeListenThread byeListenThread;<br><br>    <span class="hljs-comment">/** Construct client for accessing RouteGuide server at &#123;<span class="hljs-doctag">@code</span> host:port&#125;. */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Client</span><span class="hljs-params">(String host, <span class="hljs-type">int</span> port)</span> &#123;<br>        <span class="hljs-built_in">this</span>(ManagedChannelBuilder.forAddress(host, port).usePlaintext());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Construct client for accessing RouteGuide server using the existing channel.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Client</span><span class="hljs-params">(ManagedChannelBuilder&lt;?&gt; channelBuilder)</span> &#123;<br>        channel = channelBuilder.build();<br>        blockingStub = GreeterGrpc.newBlockingStub(channel);<br><br>        byeListenThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByeListenThread</span>();<br>        byeListenThread.setName(<span class="hljs-string">&quot;Client_ByeListenThread&quot;</span>);<br>        byeListenThread.setDaemon(<span class="hljs-literal">true</span>);<br>        byeListenThread.start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        channel.shutdown().awaitTermination(<span class="hljs-number">5</span>, TimeUnit.SECONDS);<br>        byeListenThread.cancel();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name, String msg, <span class="hljs-type">int</span> num)</span> &#123;<br>        HelloWorldProto.<span class="hljs-type">Hello</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HelloWorldProto.Hello.newBuilder().setName(name).setMsg(msg).setNum(num)<br>                .build();<br>        blockingStub.sayHello(request);<br>        System.out.printf(<span class="hljs-string">&quot;%d: %s Say %s\n&quot;</span>, num, name, msg);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByeListenThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isAlive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        HelloWorldProto.<span class="hljs-type">Null</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HelloWorldProto.Null.newBuilder().build();<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            Iterator&lt;HelloWorldProto.Bye&gt; bye;<br>            <span class="hljs-keyword">while</span> (isAlive) &#123;<br>                bye = blockingStub.sayBye(request);<br>                <span class="hljs-keyword">while</span> (bye.hasNext()) &#123; <span class="hljs-comment">// block</span><br>                    HelloWorldProto.<span class="hljs-type">Bye</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> bye.next();<br>                    <span class="hljs-comment">// if data have ptr part, hasXXX check</span><br>                    System.out.printf(<span class="hljs-string">&quot;Bye %s: %s\n&quot;</span>, data.getNum(), data.getMsg());<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>            isAlive = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">super</span>.start();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">()</span> &#123;<br>            isAlive = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-type">Client</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">10086</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br>        <span class="hljs-keyword">if</span> (args.length &gt; <span class="hljs-number">0</span>) &#123;<br>            name = args[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-keyword">if</span> (args.length &gt; <span class="hljs-number">1</span>) &#123;<br>            msg = args[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">2046</span>;<br>        <span class="hljs-keyword">if</span> (args.length &gt; <span class="hljs-number">2</span>) &#123;<br>            num = Integer.parseInt(args[<span class="hljs-number">2</span>]);<br>        &#125;<br><br>        c.sayHello(name, msg, num);<br>        <span class="hljs-comment">// wait</span><br>        System.out.println(<span class="hljs-string">&quot;wait ...&quot;</span>);<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">is_reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(is_reader).readLine();<br>        c.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h2><p>和 golang 一样而且可以交叉测试，不过 go client &amp; java server 会有超时错误，没有详细查看。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.jianshu.com/p/a94673ad10dc">golang安装gRpc</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近使用了一下 grpc 通信，现在整理一下，防止遗忘。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;grpc 可以支持不同的语言，详细可查看 &lt;a href=&quot;https://github.com/grpc/&quot;&gt;github&lt;/a&gt;。&lt;br&gt;这次我主要使用的是 go 和 java，&lt;br&gt;golang 因为墙的关系有几个包需要找镜像下载&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;git clone https://github.com/grpc/grpc-go.git $GOPATH/src/google.golang.org/grpc&lt;br&gt;git clone https://github.com/golang/net.git $GOPATH/src/golang.org/x/net&lt;br&gt;git clone https://github.com/golang/text.git $GOPATH/src/golang.org/x/text&lt;br&gt;git clone https://github.com/golang/sys.git $GOPATH/src/golang.org/x/sys&lt;br&gt;go get -u github.com/golang/protobuf/&amp;#123;proto,protoc-gen-go&amp;#125;&lt;br&gt;git clone https://github.com/google/go-genproto.git $GOPATH/src/google.golang.org/genproto&lt;br&gt;cd $GOPATH/src/&lt;br&gt;go install google.golang.org/grpc&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我看官方也详细写了使用 &lt;code&gt;go mod&lt;/code&gt; 的安装方法。&lt;/p&gt;</summary>
    
    
    
    <category term="bus" scheme="https://wishlily.github.io/categories/bus/"/>
    
    
    <category term="grpc" scheme="https://wishlily.github.io/tags/grpc/"/>
    
    <category term="go" scheme="https://wishlily.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>react 组件通信</title>
    <link href="https://wishlily.github.io/article/code/2018/09/29/react-component-communication/"/>
    <id>https://wishlily.github.io/article/code/2018/09/29/react-component-communication/</id>
    <published>2018-09-29T06:59:26.000Z</published>
    <updated>2018-09-29T06:59:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>react 使用一些心得记录。</p><span id="more"></span><h1 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h1><p>父子之间通信主要通过 <code>this.props</code>。</p><h2 id="父-gt-子"><a href="#父-gt-子" class="headerlink" title="父-&gt;子"></a>父-&gt;子</h2><p>通过属性传入，传入如果是变量，当父值改变时子组件值也会改变。<br>以下将 <code>Father</code> 中 <code>data</code> 传入到 <code>Son</code> 中。</p><p>Son：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;son&#x27;</span>,<br>    &#125;<br>    <span class="hljs-comment">// 父传来值改变</span><br>    <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">nextProps</span>) &#123;<br>        <span class="hljs-comment">// 父值改变 this.props.data</span><br>        <span class="hljs-keyword">if</span> (nextProps.<span class="hljs-property">data</span> &amp;&amp; nextProps.<span class="hljs-property">data</span> !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">data</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">data</span>: nextProps.<span class="hljs-property">data</span> &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">                &#123;this.props.data&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Son</span>;<br></code></pre></td></tr></table></figure><p>Father：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;father&#x27;</span>,<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Son</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">data</span> = <span class="hljs-string">&#123;this.state.data&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="子-gt-父"><a href="#子-gt-父" class="headerlink" title="子-&gt;父"></a>子-&gt;父</h2><p>我感觉这个类似于函数回调，值传递需要借助这个回调函数。<br>还是举个例子，<code>Son</code> 中按钮按下动作传递给 <code>Father</code>。</p><p>Son：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state &#123;<br>        <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;son&#x27;</span>,<br>    &#125;<br>    onClick = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 回调函数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">onClick</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">onClick</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">data</span>);<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.onClick&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Son</span>;<br></code></pre></td></tr></table></figure><p>Father：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    onClick = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;son -&gt;&quot;</span>, value)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Son</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">onClick</span> = <span class="hljs-string">&#123;this.onClick&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;react 使用一些心得记录。&lt;/p&gt;</summary>
    
    
    
    <category term="code" scheme="https://wishlily.github.io/categories/code/"/>
    
    
    <category term="react" scheme="https://wishlily.github.io/tags/react/"/>
    
    <category term="web" scheme="https://wishlily.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>RFID：ISO14443A</title>
    <link href="https://wishlily.github.io/article/bus/2018/05/18/rfid-iso14443a/"/>
    <id>https://wishlily.github.io/article/bus/2018/05/18/rfid-iso14443a/</id>
    <published>2018-05-18T06:43:30.000Z</published>
    <updated>2018-05-18T06:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是篇几年前总结的文档，现在重新整理一下。<br>首先建议看下《<a href="http://bbs.21ic.com/blog-15467-89510.html">看得懂的 RFID 原理</a>》这篇文章，当初找了不少资料就这篇让我明白了些 RFID 是怎么通信的。</p><p>ISO14443A 是常见的协议标准，大致如下：</p><p>载波频率 f：13.56MHz<br>数据传输率：13.56MHz&#x2F;128 &#x3D; 106Kbit&#x2F;s<br>普通卡 PICC UID：</p><ul><li>4 个字节 32 位数据</li><li>7 个字节</li><li>10 个字节</li></ul><p>各部分协议内容：</p><ol><li>ISO&#x2F;IEC 14443-1 制定了 PICC 的物理特性</li><li>ISO&#x2F;IEC 14443-2 制定了射频功率及信号界面特性</li><li>ISO&#x2F;IEC 14443-3 PICC 初始化和防冲突机制</li><li>ISO&#x2F;IEC 14443-4 有关交易的协定</li></ol><p>以下通过读卡器读卡来理解该协议，其中缩写表示如下：<br>PICC：普通卡（M1 卡）<br>PCD：读卡器（PN512）</p><span id="more"></span><h1 id="选卡"><a href="#选卡" class="headerlink" title="选卡"></a>选卡</h1><h2 id="PICC-gt-Power-Off"><a href="#PICC-gt-Power-Off" class="headerlink" title="PICC -&gt; Power Off"></a>PICC -&gt; Power Off</h2><p>PICC 静止状态周围没有可激活的 PCD 有效场</p><h2 id="PICC-gt-Idle"><a href="#PICC-gt-Idle" class="headerlink" title="PICC -&gt; Idle"></a>PICC -&gt; Idle</h2><p>PICC 进入 PCD 有效场，进入 Idle 状态（t&lt;&#x3D;5ms），Idle 态可接受命令</p><h2 id="REQA-lt-PCD"><a href="#REQA-lt-PCD" class="headerlink" title="REQA &lt;- PCD"></a>REQA &lt;- PCD</h2><p>PCD 发送 REQA，检测是否有 PICC，0x26 7-bit 数据<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-reqa.png" alt="REQA"></p><blockquote><p>Ps：两个连续 REQA 间隔 7000 &#x2F; f （&gt; 0.516ms）</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>&gt; Mifare Request:<br>SR <span class="hljs-number">0</span>A <span class="hljs-number">80</span>    <span class="hljs-regexp">//</span> flush FIFO<br>SR <span class="hljs-number">09</span> <span class="hljs-number">26</span>    <span class="hljs-regexp">//</span> FIFO - Request code<br>SR <span class="hljs-number">0</span>D <span class="hljs-number">87</span>    <span class="hljs-regexp">//</span> BitframingReg - StartSend, TxLastBits<br></code></pre></td></tr></table></figure><blockquote><p>PN512 简单测试用例脚本</p></blockquote><h2 id="PICC-gt-ATQA"><a href="#PICC-gt-ATQA" class="headerlink" title="PICC -&gt; ATQA"></a>PICC -&gt; ATQA</h2><p>PICC 向 PCD 发送自身信息<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-atqa.png" alt="ATQA"><br>其中 b7b8 可以知道该卡 UID 字节数，一般定义如下：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-uid.png" alt="UID"><br>b5-b1 一般只有 1bit 为 1，如果有 2bit 为 1 则冲突了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>&gt; Response ATQ:<br>GR <span class="hljs-number">06</span>       <span class="hljs-regexp">//</span> Read ErrReg<br>RE <span class="hljs-number">0</span>A <span class="hljs-number">02</span>    <span class="hljs-regexp">//</span> Read FIFOLevel<br>GR <span class="hljs-number">09</span>       <span class="hljs-regexp">//</span> ATQ LSB    <span class="hljs-regexp">//</span> data=<span class="hljs-number">04</span><br>GR <span class="hljs-number">09</span>       <span class="hljs-regexp">//</span> ATQ MSB    <span class="hljs-regexp">//</span> data=<span class="hljs-number">00</span> -&gt; Mifare Plus<br></code></pre></td></tr></table></figure><blockquote><p>PCD 读到的数据是 0x0004，通过芯片官方文档（见下）可知该卡是 Mifare Plus 4 Byte UID 型号<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-uid-nxp.png" alt="NXP"></p></blockquote><h2 id="Anticollision-lt-PCD"><a href="#Anticollision-lt-PCD" class="headerlink" title="Anticollision &lt;- PCD"></a>Anticollision &lt;- PCD</h2><p>防冲突没有实践过，所以可能理解有误。<br>下图是防冲突流程图：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-anticollision.png" alt="anticollision"><br>由上图可以看出 PCD 发送的命令有 <code>SEL</code> <code>NVB</code> <code>UID CLn</code> 等部分组成：</p><ul><li><code>SEL</code>：Select code 值可能是 0x93 0x95 0x97，表示不同的冲突阶段<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-sel.png" alt="sel"><br>防冲突等级区分如下（感觉和 UID 大小有关）：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-sel-level.png" alt="sel-level"></li><li><code>NVB</code>：Number of Valid Bits 冲突发生的位置（第几个字节第几个位置）<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-nvb.png" alt="nvb"></li></ul><p>官方文档有个防冲突例子，感觉还挺清楚的：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-anticollision-eg.png" alt="eg"></p><blockquote><p>我的理解 PCD 防冲突检测第一阶段,要求所有 PICC 返回自己的 UID，<br>读卡器发送：<code>0x93 0x20</code>，<br>当冲突发生时，PCD 接收不完整的 UID，截止在冲突处（不是很明白 PCD 怎么知道冲突了？），<br>下次 PCD 发送收到不完整 UID，PICC 接着响应直到没有冲突。</p></blockquote><h2 id="PICC-gt-UID"><a href="#PICC-gt-UID" class="headerlink" title="PICC -&gt; UID"></a>PICC -&gt; UID</h2><p>PICC 返回自己的 UID（记不清 PCD 是不是要先发送 <code>0x93 0x20</code> 了）<br>UID 格式如下：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-uid-bcc.png" alt="uid-bcc"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>&gt;         Response SNR:<br>GR <span class="hljs-number">06</span>       <span class="hljs-regexp">//</span> Read ErrReg<br>RE <span class="hljs-number">0</span>A <span class="hljs-number">05</span>    <span class="hljs-regexp">//</span> Read FIFOLevel<br>GR <span class="hljs-number">09</span>       <span class="hljs-regexp">//</span> Read SNR <span class="hljs-number">0</span>   <span class="hljs-regexp">//</span> data=<span class="hljs-number">7</span>A<br>GR <span class="hljs-number">09</span>       <span class="hljs-regexp">//</span> Read SNR <span class="hljs-number">1</span>   <span class="hljs-regexp">//</span> data=<span class="hljs-number">4</span>E<br>GR <span class="hljs-number">09</span>       <span class="hljs-regexp">//</span> Read SNR <span class="hljs-number">2</span>   <span class="hljs-regexp">//</span> data=<span class="hljs-number">39</span><br>GR <span class="hljs-number">09</span>       <span class="hljs-regexp">//</span> Read SNR <span class="hljs-number">3</span>   <span class="hljs-regexp">//</span> data=<span class="hljs-number">48</span><br>GR <span class="hljs-number">09</span>       <span class="hljs-regexp">//</span> Read SNR <span class="hljs-number">4</span> (check byte)   <span class="hljs-regexp">//</span> data=<span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><blockquote><p>BCC 为校验码，所以上面例子卡的 UID &#x3D; 7A4E3948</p></blockquote><h2 id="SEL-lt-PCD"><a href="#SEL-lt-PCD" class="headerlink" title="SEL &lt;- PCD"></a>SEL &lt;- PCD</h2><p>PCD 选择一张卡，发送 <code>0x93 0x70 UID BCC CRC</code></p><blockquote><p>有的芯片设置需要打开 CRC 校验</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>&gt; Mifare Select:<br>SR <span class="hljs-number">0</span>a <span class="hljs-number">80</span>    <span class="hljs-regexp">//</span> flush FIFO<br>SR <span class="hljs-number">12</span> <span class="hljs-number">80</span>    <span class="hljs-regexp">//</span> TxMode: activate CRC<br>SR <span class="hljs-number">13</span> <span class="hljs-number">80</span>    <span class="hljs-regexp">//</span> RxMode: activate CRC<br>SR <span class="hljs-number">09</span> <span class="hljs-number">93</span>    <span class="hljs-regexp">//</span> fast activation of Mifare<br>SR <span class="hljs-number">09</span> <span class="hljs-number">70</span>    <span class="hljs-regexp">//</span> NVB byte<br>SR <span class="hljs-number">09</span> <span class="hljs-number">7</span>A    <span class="hljs-regexp">//</span> Write SNR <span class="hljs-number">0</span><br>SR <span class="hljs-number">09</span> <span class="hljs-number">4</span>E    <span class="hljs-regexp">//</span> Write SNR <span class="hljs-number">1</span><br>SR <span class="hljs-number">09</span> <span class="hljs-number">39</span>    <span class="hljs-regexp">//</span> Write SNR <span class="hljs-number">2</span><br>SR <span class="hljs-number">09</span> <span class="hljs-number">48</span>    <span class="hljs-regexp">//</span> Write SNR <span class="hljs-number">3</span><br>SR <span class="hljs-number">09</span> <span class="hljs-number">45</span>    <span class="hljs-regexp">//</span> Write SNR <span class="hljs-number">4</span> (check byte)<br>SR <span class="hljs-number">0</span>d <span class="hljs-number">80</span>    <span class="hljs-regexp">//</span> BitframingReg - StartSend, TxLastBits<br></code></pre></td></tr></table></figure><h2 id="PICC-gt-SAK"><a href="#PICC-gt-SAK" class="headerlink" title="PICC -&gt; SAK"></a>PICC -&gt; SAK</h2><p>PICC 确认 PCD 的选择<br>回复格式：SAK + CRC16 (2-byte)<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-sak.png" alt="sak"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>&gt;         Response SAK:<br>GR <span class="hljs-number">06</span>       <span class="hljs-regexp">//</span> Read ErrReg<br>RE <span class="hljs-number">0</span>A <span class="hljs-number">01</span>    <span class="hljs-regexp">//</span> Read FIFOLevel<br>GR <span class="hljs-number">09</span>       <span class="hljs-regexp">//</span> Read SAK   <span class="hljs-regexp">//</span> data=<span class="hljs-number">08</span> Mifare Classic <span class="hljs-number">1</span>K<br></code></pre></td></tr></table></figure><blockquote><p>例子中 SAK 回复 0x08，查看芯片手册为 Mifare Classic 1K 卡<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-sak-nxp.png" alt="sak-nxp"></p></blockquote><h1 id="读写-EEPROM"><a href="#读写-EEPROM" class="headerlink" title="读写 EEPROM"></a>读写 EEPROM</h1><h2 id="Mifare1-Card"><a href="#Mifare1-Card" class="headerlink" title="Mifare1 Card"></a>Mifare1 Card</h2><p>Mifare 1 卡片采用 EEPROM 作为存储介质，容量为 1K × 8 位 ，分为 16 个扇区（0<del>15），每个扇区有 4 个块（0</del>3），每块有 16 字节。一个扇区共 16Byte × 4 &#x3D; 64Byte。扇区的第四块称作尾块，包含了该扇区的密码 A（6个字节）、存取控制（4个字节）、密码 B（6个字节），是控制块。其余三块是数据块。<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-m1.png" alt="m1"><br>扇区 0 的块 0 固化了厂商代码信息，不可改写。<br>其中：</p><ul><li>第 0~4 字节为卡片的序列号</li><li>第 5 字节为序列号的校验码</li><li>第 6 字节为卡片的容量「SIZE」</li><li>第 7，8 字节为卡片的类型号（Tagtype）</li><li>其他字节由厂商另加定义</li></ul><p>如下图所示：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-m1-disk.png" alt="m1-disk"></p><h3 id="Control-blocks"><a href="#Control-blocks" class="headerlink" title="Control blocks"></a>Control blocks</h3><p>即每个扇区最后一块<br>存储格式如下：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-ctrl-block.png" alt="ctrl-block"></p><ul><li>KeyA&#x2F;B: 读取时返回 0（对 Key 的一种保护吧，默认 Key 一般是 0xFFFFFFFFFFFF），KeyB 不用可做数据字节( 9 字节亦然)</li><li>Access Bit: 控制位，表示扇区各块属性<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-access-bit.png" alt="access-bit"><br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-access-bit-2.png" alt="access-bit-2"></li><li>Byte9：没有实际意义，可当作数据块</li></ul><p>控制块读写权限表如下：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-access.png" alt="access"></p><blockquote><p>图中灰色区域 keyB 可以当作数据区使用<br>修改 access bit 后最好重新认证一下</p></blockquote><h3 id="Data-blocks"><a href="#Data-blocks" class="headerlink" title="Data blocks"></a>Data blocks</h3><p>数据块，一般分两类：</p><ol><li>read&#x2F;write blocks<br>一般用在非接触门禁管理，好像没有特殊格式要求</li><li>value blocks<br>其实应该是 read&#x2F;write blocks 的特殊类型，一般用在电子钱包，有增值&#x2F;减值（单独操作命令）<br>存储格式如下图：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-val.png" alt="val"><blockquote><p>可操作命令包括 read，write，increment（增值），decrement（减值），restore（恢复），transfer（转移）<br>Vaule 值需要先按照上述格式 write 到存储数据，才能使用增减值等特殊指令操作<br>Adr 是进行备份管理时，用于保存块地址，只能通过 write 命令更改</p></blockquote></li></ol><p>数据块操作权限表如下：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-access-data.png" alt="access-data"></p><blockquote><p>在用于非充值卡的一种情况（001）下，只能够读和减值<br>在另一种情况（110）下，可以用 keyB 充值<br>终极权限下（111）扇区再也不能修改，keyA&#x2F;B 需要保管好</p></blockquote><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p>M1 卡控制命令，上面都有提到，具体列表如下：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-cmd.png" alt="cmd"></p><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>M1 卡手册中认证需要如下过程：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-auth-1.png" alt="auth-1"><br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-auth-2.png" alt="auth-2"><br>命令表示如下：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-auth-cmd.png" alt="auth-cmd"><br>不过这部分其实还是要看读卡器怎么设置，PN512 手册里面要求如下：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-auth.png" alt="auth"><br>即在 FIFO 写入 <code>60/61 + addr + keyA/B(6byte) + UID(4byte)</code> + <code>CRC</code><br>判断认证结果：</p><ul><li>成功：<code>Status2 Reg[3]=1</code></li><li>失败：<code>Status2 Reg[3]=0</code></li></ul><h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><p>时序图：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-read.png" alt="read"><br>PN512：<br>发送：<code>30 + addr</code> + <code>CRC</code><br>接收：<code>data(16byte)</code> + <code>CRC</code></p><h2 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h2><p>时序图：<br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-write-1.png" alt="write-1"><br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-write-2.png" alt="write-2"><br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-write-3.png" alt="write-3"><br><img src="https://wishlily.github.io/images/article/bus/2018/05/18/rfid-iso14443a/20180517-write-4.png" alt="write-4"><br>PN512：<br>发送: <code>A0 + addr</code> + <code>CRC</code><br>接收: <code>ACK(A0)/NAK/timeout(5ms)</code> + <strong><code>NO CRC</code></strong><br>发送: <code>data(16byte)</code> + <code>CRC</code><br>接收: <code>ACK(A0)/NAK/timeout(10ms)</code> + <strong><code>NO CRC</code></strong></p><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>Increment &amp; Decrement &amp; Restore &amp; Transfer 这些命令也像上面一样对照着 M1 卡手册和 PN512 手册查看，这里不再赘述了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当初看 RFID 怎么读写时特别困惑，因为读卡器手册上只有寄存器表示什么，没有说里面值要填什么值。<br>后来看了 M1 手册和例子才知道，哦，原来这个协议就是这么规定的。<br>所以有时理解标准协议不如看看相关芯片手册，也许会有惊喜。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是篇几年前总结的文档，现在重新整理一下。&lt;br&gt;首先建议看下《&lt;a href=&quot;http://bbs.21ic.com/blog-15467-89510.html&quot;&gt;看得懂的 RFID 原理&lt;/a&gt;》这篇文章，当初找了不少资料就这篇让我明白了些 RFID 是怎么通信的。&lt;/p&gt;
&lt;p&gt;ISO14443A 是常见的协议标准，大致如下：&lt;/p&gt;
&lt;p&gt;载波频率 f：13.56MHz&lt;br&gt;数据传输率：13.56MHz&amp;#x2F;128 &amp;#x3D; 106Kbit&amp;#x2F;s&lt;br&gt;普通卡 PICC UID：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 个字节 32 位数据&lt;/li&gt;
&lt;li&gt;7 个字节&lt;/li&gt;
&lt;li&gt;10 个字节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各部分协议内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ISO&amp;#x2F;IEC 14443-1 制定了 PICC 的物理特性&lt;/li&gt;
&lt;li&gt;ISO&amp;#x2F;IEC 14443-2 制定了射频功率及信号界面特性&lt;/li&gt;
&lt;li&gt;ISO&amp;#x2F;IEC 14443-3 PICC 初始化和防冲突机制&lt;/li&gt;
&lt;li&gt;ISO&amp;#x2F;IEC 14443-4 有关交易的协定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下通过读卡器读卡来理解该协议，其中缩写表示如下：&lt;br&gt;PICC：普通卡（M1 卡）&lt;br&gt;PCD：读卡器（PN512）&lt;/p&gt;</summary>
    
    
    
    <category term="bus" scheme="https://wishlily.github.io/categories/bus/"/>
    
    
    <category term="rfid" scheme="https://wishlily.github.io/tags/rfid/"/>
    
    <category term="pn512" scheme="https://wishlily.github.io/tags/pn512/"/>
    
    <category term="m1" scheme="https://wishlily.github.io/tags/m1/"/>
    
  </entry>
  
  <entry>
    <title>博客图床</title>
    <link href="https://wishlily.github.io/article/tools/2018/05/15/figure-bed/"/>
    <id>https://wishlily.github.io/article/tools/2018/05/15/figure-bed/</id>
    <published>2018-05-14T20:04:03.000Z</published>
    <updated>2019-01-08T07:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>原来我的博客使用七牛作为图床，速度挺快但是无法免费使用 https，就想着更换一个图床（其实就是不折腾就难受）。<br>更换图床有两处较为麻烦：</p><ol><li>markdown 文档图片链接批量替换，并且有时没有规律可循。</li><li>大量图片上传到新的图床并且获得图片链接地址。</li></ol><p>基于以上的考虑我对博客做了如下调整。</p><span id="more"></span><h1 id="图片链接处理"><a href="#图片链接处理" class="headerlink" title="图片链接处理"></a>图片链接处理</h1><p>hexo 有个 <code>hexo-asset-image</code> 插件可以自动补全图片全路径，我们只需稍微修改下就可以将图片链接地址查找抛给程序处理，而不用一个个手动替换。<br>我分别对云存储库和其他图库做了区别，说明如下具体代码修改参见 <a href="https://github.com/Wishlily/hexo-asset-image/blob/master/index.js">github</a>  。</p><h2 id="云存储"><a href="#云存储" class="headerlink" title="云存储"></a>云存储</h2><p>七牛上传时路径可以指定，地址头是固定的，所以上传成功后也就知道图片的外链地址是什么了。<br>比如：</p><ol><li>你建立一个存储空间，七牛分给你的测试域名是 <code>xxx.bkt.clouddn.com</code></li><li>上传一个图片 <code>test.jpg</code> 到该存储空间，你设置的前缀是 <code>myway/test/</code></li><li>那么该图片的外链地址就是 <code>http://xxx.bkt.clouddn.com/myway/test/test.jpg</code></li></ol><p>这种类型的图床只需要定义一套自己的上传路径规则就好了，外链地址完全可以自动生成。</p><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><p>其他图床多半是相册类型的，你不能控制外链的格式和名字。<br>比如：</p><ol><li>你上传一个 <code>test.jpg</code> 图片到新浪相册</li><li>查看外链你会发现是 <code>https://wx4.sinaimg.cn/tesdf/bc323245hj23402c0b29.jpg</code>，完全没有规律可言</li></ol><p>这种情况你需要一个源文件名和地址对应表，我使用的是 json 文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test.jpg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://wx4.sinaimg.cn/tesdf/bc323245hj23402c0b29.jpg&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>当然这种需要你的所有源文件名不能重复。</p><h1 id="图床选择"><a href="#图床选择" class="headerlink" title="图床选择"></a>图床选择</h1><h2 id="七牛"><a href="#七牛" class="headerlink" title="七牛"></a><del>七牛</del></h2><p><del>有免费 10G 的存储空间，而且可以自动处理图片加水印什么的。</del><br><del>网上有很多批量上传工具，我就不说了，这是我用的脚本代码 <a href="https://github.com/Wishlily/figure-bed/blob/master/qiniu-upload.py">qiniu-upload.py</a>。</del><br>目前测试用的外链地址取消了，所以也没有办法做图床了。</p><h2 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h2><p>使用静态博客本身路径存储（<del>要挂一起挂</del>），一般博客（<del>一年更不了几次</del>）完全够用了。<br>但是图片要保存到 git 中，需要大文件管理，目前我用的 <a href="https://github.com/git-lfs/git-lfs">Git LFS</a>。<br>安装好后执行以下操作初始化：</p><pre><code class="hljs">git lfs installgit lfs track &quot;*.png&quot;git lfs track &quot;*.jpg&quot;git add .gitattributes</code></pre><h2 id="flickr"><a href="#flickr" class="headerlink" title="flickr"></a>flickr</h2><p>我选择这个主要是空间没有限制，api 也很丰富，唯一的缺点就是国内会被屏蔽吧。我一般放的是自己拍摄的照片，也都是自我欣赏所以这点对我没有影响。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>申请自己的 <a href="https://www.flickr.com/services/apps/create/apply/">API Key</a>。<br>因为我使用的是 python，安装 flickrapi 库：<code>pip install flickrapi</code>。<br>翻墙，这个很重要，我一开始怎么试都是失败就是因为没有翻墙。。。</p><h3 id="获得权限"><a href="#获得权限" class="headerlink" title="获得权限"></a>获得权限</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">flickr = flickrapi.FlickrAPI(api_key, api_secret)<br>flickr.authenticate_via_browser(perms=<span class="hljs-string">&#x27;write&#x27;</span>)<br></code></pre></td></tr></table></figure><p>注意的是这种授权第一次会弹出一个网页界面，所以系统里面必须要有浏览器。<br>授权通过后你的用户下会产生一个 <code>.flickr</code> 文件夹里面存放着授权信息。</p><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">rsp = flickr.upload(filename=<span class="hljs-string">&quot;xxx.jpg&quot;</span>)<br><span class="hljs-keyword">if</span> rsp.attrib[<span class="hljs-string">&#x27;stat&#x27;</span>] == <span class="hljs-string">&#x27;ok&#x27;</span>:<br>    photo_id = rsp.find(<span class="hljs-string">&#x27;photoid&#x27;</span>).text<br></code></pre></td></tr></table></figure><p><a href="https://www.flickr.com/services/api/upload.api.html">详细说明</a>，这样获得了上传后图片 ID。</p><h3 id="获得外链地址"><a href="#获得外链地址" class="headerlink" title="获得外链地址"></a>获得外链地址</h3><p>使用 <a href="https://www.flickr.com/services/api/flickr.photos.getSizes.html"><code>flickr.photos.getSizes</code></a> API 可以获得图片各种大小的外链地址。<br>开始不清楚 flickrapi 库怎么调用这个 API，后来发现好像是有规律的，<code>photos.getSizes</code> 就是 <code>photos_getSizes</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">rsp = flickr.photos_getSizes(photo_id=photo_id)<br>sizes = rsp.find(<span class="hljs-string">&#x27;sizes&#x27;</span>)<br>urls = &#123;&#125;<br><span class="hljs-keyword">for</span> size <span class="hljs-keyword">in</span> sizes:<br>    info = size.attrib<br>    urls[info[<span class="hljs-string">&#x27;label&#x27;</span>]] = info[<span class="hljs-string">&#x27;source&#x27;</span>]<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Medium 800&#x27;</span> <span class="hljs-keyword">in</span> urls:<br>    url = urls[<span class="hljs-string">&#x27;Medium 800&#x27;</span>]<br><span class="hljs-built_in">print</span>(url)<br></code></pre></td></tr></table></figure><p>返回数据处理可以查看 <a href="https://stuvel.eu/flickrapi-doc/2-calling.html#response-parser-elementtree">Response parser: ElementTree</a> 文档。</p><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p>将图片文件名和地址保存为 json 文件。<br>全部代码参见 <a href="https://github.com/Wishlily/figure-bed/blob/master/flickr-upload.py">flickr-upload.py</a>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;原来我的博客使用七牛作为图床，速度挺快但是无法免费使用 https，就想着更换一个图床（其实就是不折腾就难受）。&lt;br&gt;更换图床有两处较为麻烦：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;markdown 文档图片链接批量替换，并且有时没有规律可循。&lt;/li&gt;
&lt;li&gt;大量图片上传到新的图床并且获得图片链接地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于以上的考虑我对博客做了如下调整。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://wishlily.github.io/categories/tools/"/>
    
    
    <category term="python" scheme="https://wishlily.github.io/tags/python/"/>
    
    <category term="flickr" scheme="https://wishlily.github.io/tags/flickr/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox 虚拟网卡消失问题</title>
    <link href="https://wishlily.github.io/article/tools/2018/03/08/undefined/"/>
    <id>https://wishlily.github.io/article/tools/2018/03/08/undefined/</id>
    <published>2018-03-08T03:46:53.000Z</published>
    <updated>2018-03-08T03:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>VirtualBox 一般安装时会在本地新建一个 <code>VirtualBox Host-Only Network</code> 的虚拟网卡，本机可以通过这个网卡和虚拟机通信。<br>然而 Windows 在升级时有可能会丢失掉这个网卡（比如：Windows8 升级到 Windows10），而且升级后原来的网卡还有残留配置，导致 VirtualBox 再新建一个网卡名字会变成 <code>VirtualBox Host-Only Network #2</code>，并且在设置原来的地址时会报地址重复占用的提示。</p><span id="more"></span><p>新建虚拟网卡显示如下<br><img src="https://wishlily.github.io/images/article/tools/2018/03/08/undefined/bug_net.jpg" alt="网络适配器"><br>修改 IP 地址为原来的会报如下错误<br><img src="https://wishlily.github.io/images/article/tools/2018/03/08/undefined/warning.png" alt="地址占用"></p><p>怎么删除这个消失的网卡困扰了我一段时间，直到英文搜索到「<a href="https://forums.virtualbox.org/viewtopic.php?f=6&t=82574&sid=3301815816f83667025c96edc08f8939&start=15">Problem after updating to Windows 10 1703</a>」这个讨论，找到了解决办法。（PS：英语真的很重要啊！so sad）</p><p>其中列出了具体步骤，不过我没有卸载再安装 VirtualBox，我的步骤如下：</p><ol><li>关闭虚拟机软件</li><li>下载 <a href="https://github.com/jschicht/RunAsTI">RunAsTI</a>，这个不用安装解压就可以使用，感觉很强大啊。之前注册表被保护都看不到里面的内容，使用这个工具后就可以了。</li><li>运行 <code>RunAsTI64</code> 打开 cmd，输入 <code>regedit</code> 打开注册表</li><li>查找 <code>\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\NetworkSetup2\Interfaces\</code> 下残留 <code>Virtualbox Host-Only Network Adapter</code> 信息项，并将其删除。<br><img src="https://wishlily.github.io/images/article/tools/2018/03/08/undefined/reg.png" alt="注册表"></li><li>重启电脑</li></ol><p>好了，问题解决了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;VirtualBox 一般安装时会在本地新建一个 &lt;code&gt;VirtualBox Host-Only Network&lt;/code&gt; 的虚拟网卡，本机可以通过这个网卡和虚拟机通信。&lt;br&gt;然而 Windows 在升级时有可能会丢失掉这个网卡（比如：Windows8 升级到 Windows10），而且升级后原来的网卡还有残留配置，导致 VirtualBox 再新建一个网卡名字会变成 &lt;code&gt;VirtualBox Host-Only Network #2&lt;/code&gt;，并且在设置原来的地址时会报地址重复占用的提示。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://wishlily.github.io/categories/tools/"/>
    
    
    <category term="vm" scheme="https://wishlily.github.io/tags/vm/"/>
    
    <category term="win" scheme="https://wishlily.github.io/tags/win/"/>
    
  </entry>
  
  <entry>
    <title>xShell 脚本</title>
    <link href="https://wishlily.github.io/article/tools/2017/12/06/undefined/"/>
    <id>https://wishlily.github.io/article/tools/2017/12/06/undefined/</id>
    <published>2017-12-06T03:28:01.000Z</published>
    <updated>2017-12-06T03:28:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要写个自动交互脚本，发现 xShell 可以直接运行，真是方便不少。</p><span id="more"></span><p>xShell 支持三种脚本文件：VBScript、JavaScript 和 Python。</p><h1 id="VBScript"><a href="#VBScript" class="headerlink" title="VBScript"></a>VBScript</h1><p>文件名以 <code>vbs</code> 结尾，sublime 可以安装插件（VBScript）方便调试。</p><h2 id="基本语法1"><a href="#基本语法1" class="headerlink" title="基本语法1"></a>基本语法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h2><h3 id="常量2"><a href="#常量2" class="headerlink" title="常量2"></a>常量<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3><ul><li><code>VbCrLf</code>：换行符</li><li><code>Chr(8)</code>：退格符</li><li><code>VbTab</code>：制表符</li><li><code>VbCr</code>：回车符</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>字符串：<code>str=&quot;I am string&quot;</code><br>数组：</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vbs"><span class="hljs-keyword">dim</span> <span class="hljs-built_in">array</span>(n)<br><span class="hljs-built_in">array</span>(<span class="hljs-number">0</span>)=<span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-built_in">array</span>(<span class="hljs-number">1</span>)=<span class="hljs-string">&quot;2&quot;</span><br>.<br>.<br>.<br><span class="hljs-built_in">array</span>(n<span class="hljs-number">-1</span>)=<span class="hljs-string">&quot;n&quot;</span><br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>定义：</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbs"><span class="hljs-keyword">Sub</span> FuncName(argv1, argv2)<br>...<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbs">FuncName input1, input2<br></code></pre></td></tr></table></figure><blockquote><p>不需要加括号</p></blockquote><h2 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h2><p>进入 <code>/root</code> 路径，新建文件写入「Hello World」并保存。</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vbs">ready=<span class="hljs-string">&quot;# &quot;</span><br><br><span class="hljs-keyword">Sub</span> send(str)<br>xsh.Screen.Send str<br>xsh.Session.Sleep <span class="hljs-number">100</span><br>xsh.Screen.Send VbCr<br>xsh.Screen.WaitForString ready<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br><br><span class="hljs-keyword">Sub</span> main<br>xsh.Screen.Synchronous = <span class="hljs-literal">True</span><br>send <span class="hljs-string">&quot;cd /root/&quot;</span><br>xsh.Screen.Send <span class="hljs-string">&quot;vi test&quot;</span><br>xsh.Session.Sleep <span class="hljs-number">100</span><br>xsh.Screen.Send VbCr<br>xsh.Session.Sleep <span class="hljs-number">100</span><br>xsh.Screen.Send <span class="hljs-string">&quot;a&quot;</span><br>xsh.Session.Sleep <span class="hljs-number">100</span><br>xsh.Screen.Send <span class="hljs-string">&quot;Hello World&quot;</span><br>xsh.Screen.Send VbCr<br>xsh.Screen.Send <span class="hljs-built_in">Chr</span>(<span class="hljs-number">27</span>)<br>xsh.Screen.Send <span class="hljs-string">&quot;:wq&quot;</span><br>xsh.Screen.Send VbCr<br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>需要安装 Python，有些麻烦。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.w3school.com.cn/vbscript/index.asp">W3school-VBS</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.voidcn.com/article/p-tugqcpgw-bmk.html">VBS 中的转义符</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="http://blog.csdn.net/qidi_huang/article/details/52055480">xShell 终端调用 VBS 脚本使用方法说明</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近需要写个自动交互脚本，发现 xShell 可以直接运行，真是方便不少。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://wishlily.github.io/categories/tools/"/>
    
    
    <category term="vbs" scheme="https://wishlily.github.io/tags/vbs/"/>
    
    <category term="shell" scheme="https://wishlily.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>ImageMagick</title>
    <link href="https://wishlily.github.io/article/code/2017/12/01/undefined/"/>
    <id>https://wishlily.github.io/article/code/2017/12/01/undefined/</id>
    <published>2017-12-01T08:30:34.000Z</published>
    <updated>2017-12-01T08:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用一下 ImageMagick 处理图片，现在记录一下常用几个函数。<br>官方文档在<a href="https://www.imagemagick.org/api/magick-image.php">这里</a>。</p><span id="more"></span><p>直接贴一个例子<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>：<br>将彩色图片转换灰度图片保存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span><br>&#123;<br><span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s picture.\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename = argv[<span class="hljs-number">1</span>];<br><br>MagickWandGenesis();<br><br>MagickWand *images = NewMagickWand();<br><span class="hljs-keyword">if</span>(!MagickReadImage(images, filename)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;E: %s read failed.\n&quot;</span>, filename);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Read: %s\n&quot;</span>, MagickGetImageFilename(images));<br><span class="hljs-type">int</span> width = MagickGetImageWidth(images);<br><span class="hljs-type">int</span> height = MagickGetImageHeight(images);<br><br><span class="hljs-type">size_t</span> bloblen = width * height;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *blob = <span class="hljs-built_in">malloc</span>(bloblen);<br><span class="hljs-keyword">if</span>(!MagickExportImagePixels(images, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height, <span class="hljs-string">&quot;I&quot;</span>, CharPixel, blob)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;E: read picture failed.\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">3</span>);<br>&#125;<br><span class="hljs-comment">// write</span><br>MagickWand *img = NewMagickWand();<br>PixelWand *pix = NewPixelWand();<br><span class="hljs-keyword">if</span> (!MagickNewImage(img, width, height, pix)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;E: new image failed.\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!MagickImportImagePixels(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height, <span class="hljs-string">&quot;I&quot;</span>, CharPixel, blob)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;E: write picture failed.\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">5</span>);<br>&#125;<br>MagickWriteImage(img, <span class="hljs-string">&quot;out.jpg&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Write: out.jpg\n&quot;</span>);<br><br><span class="hljs-comment">// clean</span><br><span class="hljs-built_in">free</span>(blob);<br>DestroyPixelWand(pix);<br>DestroyMagickWand(img);<br>DestroyMagickWand(images);<br>MagickWandTerminus();<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：<br>makefile 需要添加 ImageMagick 动态库路径<br><code>-I/usr/local/include/ImageMagick-6 -L/usr/local/include/ImageMagick-6/ -lMagickWand-6.Q16</code></p></blockquote><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://stackoverflow.com/questions/32762068/converting-from-single-channel-12-bit-little-endian-raw-binary-data/32764667#32764667">Stack Overflow</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近使用一下 ImageMagick 处理图片，现在记录一下常用几个函数。&lt;br&gt;官方文档在&lt;a href=&quot;https://www.imagemagick.org/api/magick-image.php&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="code" scheme="https://wishlily.github.io/categories/code/"/>
    
    
    <category term="draw" scheme="https://wishlily.github.io/tags/draw/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 增强</title>
    <link href="https://wishlily.github.io/article/tools/2017/09/07/undefined/"/>
    <id>https://wishlily.github.io/article/tools/2017/09/07/undefined/</id>
    <published>2017-09-07T08:13:30.000Z</published>
    <updated>2017-09-07T08:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/js/jquery.min.js"></script><script src="/js/underscore-min.js"></script><script src="/js/raphael.min.js"></script><script src="/js/sequence-diagram-min.js"></script><script src="/js/Chart.min.js"></script><script src="/js/chart.md.js"></script><p>用 Markdown 写文档，主要是省去了排版的麻烦，编辑也简单随便使用个文本编辑器就行。不过也有无力的时候，比如绘图等。<br>这里我使用一些现成的 js 库，完成一些复杂的功能。当然从简洁的角度这样不太优雅，但是可以保留原始数据方便修改，各有利弊吧。<br>以下方法使用是 html 语言，所以在 html 中也适用的。</p><span id="more"></span><h2 id="UML-序列图"><a href="#UML-序列图" class="headerlink" title="UML 序列图"></a>UML 序列图</h2><p>使用 <a href="https://bramp.github.io/js-sequence-diagrams/">js-sequence-diagrams</a> 库。<br>该库可以将文本描述自动生成 UML 序列图。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>主要需要以下 js 文件，可以将其下载到本地，也可使用网上在线库。</p><ul><li><code>jquery.min.js</code></li><li><code>underscore-min.js</code></li><li><code>raphael.min.js</code></li><li><code>sequence-diagram-min.js</code></li></ul><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>在 markdown 中开头添加 js 引用路径，如下：</p><pre><code class="hljs">&lt;script src=&quot;/js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/js/underscore-min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/js/raphael.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/js/sequence-diagram-min.js&quot;&gt;&lt;/script&gt;</code></pre><p>想要渲染的文本使用 <code>&lt;div class=&quot;diagram&quot;&gt;&lt;/div&gt;</code> 标记，如下：</p><pre><code class="hljs">&lt;div class=&quot;diagram&quot;&gt;    Alice-&gt;Bob: Hello Bob, how are you?    Note right of Bob: Bob thinks    Bob--&gt;Alice: I am good thanks!&lt;/div&gt;</code></pre><p>在文件末尾添加动作：</p><pre><code class="hljs">&lt;script&gt;    $(&quot;.diagram&quot;).sequenceDiagram(&#123;theme: &#39;hand&#39;&#125;);&lt;/script&gt;</code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><div class="diagram">    Alice->Bob: Hello Bob, how are you?    Note right of Bob: Bob thinks    Bob-->Alice: I am good thanks!</div><blockquote><p>PS: hexo 会渲染 html 代码，造成显示错误，如下可避免</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% raw %&#125;<br>your html<br>&#123;% endraw %&#125;<br></code></pre></td></tr></table></figure><h2 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h2><p>使用 <a href="https://github.com/chartjs/Chart.js">Chart.js</a> 库。</p><h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><p>主要需要以下 js 文件：</p><ul><li><code>jquery.min.js</code></li><li><code>Chart.min.js</code></li></ul><p>为了方便使用，再添加一个解析文件（<code>chart.md.js</code>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)&#123;<br>    <span class="hljs-keyword">var</span> methods = &#123;<br>        bar : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> data = $.<span class="hljs-title function_">parseJSON</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">text</span>())<br>            <span class="hljs-comment">// get data</span><br>            <span class="hljs-keyword">var</span> datasets = [];<br>            <span class="hljs-keyword">var</span> color = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">360</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; data[<span class="hljs-string">`data`</span>].<span class="hljs-property">length</span>; i++) &#123;<br>                <span class="hljs-keyword">var</span> dataset = &#123;&#125;;<br>                dataset.<span class="hljs-property">label</span> = data[<span class="hljs-string">`data`</span>][i][<span class="hljs-string">`label`</span>];<br>                dataset.<span class="hljs-property">data</span> = data[<span class="hljs-string">`data`</span>][i][<span class="hljs-string">`data`</span>];<br>                dataset.<span class="hljs-property">borderWidth</span> = <span class="hljs-number">1</span>;<br>                dataset.<span class="hljs-property">hoverBorderWidth</span> = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">var</span> h = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(color + (i * <span class="hljs-number">137.5</span>)) % <span class="hljs-number">360</span>;<br>                <span class="hljs-keyword">var</span> l = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">20</span>) + <span class="hljs-number">60</span>;<br>                dataset.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;hsla(&#x27;</span> + h + <span class="hljs-string">&#x27;,70%,&#x27;</span> + l + <span class="hljs-string">&#x27;%,0.4)&#x27;</span>;<br>                dataset.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&#x27;hsla(&#x27;</span> + h + <span class="hljs-string">&#x27;,70%,&#x27;</span> + l + <span class="hljs-string">&#x27;%,1)&#x27;</span>;<br>                datasets[i] = dataset;<br>            &#125;<br>            <span class="hljs-comment">// get bar type</span><br>            <span class="hljs-keyword">var</span> type = <span class="hljs-string">&#x27;bar&#x27;</span>;<br>            <span class="hljs-keyword">var</span> xstacked = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">var</span> ystacked = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (data.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;type&quot;</span>)) &#123;<br>                <span class="hljs-keyword">var</span> ss = data[<span class="hljs-string">`type`</span>];<br>                <span class="hljs-keyword">if</span> (ss.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;horiz&#x27;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>                    type = <span class="hljs-string">&#x27;horizontalBar&#x27;</span>;<br>                    <span class="hljs-keyword">if</span> (ss.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;over&#x27;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>                        ystacked = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (ss.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;over&#x27;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>                        xstacked = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (ss.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;stack&#x27;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>                    xstacked = <span class="hljs-literal">true</span>;<br>                    ystacked = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chart</span>(<span class="hljs-variable language_">this</span>, &#123;<br>                <span class="hljs-attr">type</span>: type,<br>                <span class="hljs-attr">data</span>: &#123;<br>                    <span class="hljs-attr">labels</span>: data[<span class="hljs-string">`item`</span>],<br>                    <span class="hljs-attr">datasets</span>: datasets,<br>                &#125;,<br>                <span class="hljs-attr">options</span>: &#123;<br>                    <span class="hljs-attr">responsive</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-attr">title</span>: &#123;<br>                        <span class="hljs-attr">display</span>: data.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;title&quot;</span>),<br>                        <span class="hljs-attr">text</span>: data[<span class="hljs-string">`title`</span>],<br>                    &#125;,<br>                    <span class="hljs-attr">legend</span>: &#123;<br>                        <span class="hljs-attr">display</span>: data[<span class="hljs-string">`data`</span>][<span class="hljs-number">0</span>].<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;label&quot;</span>),<br>                    &#125;,<br>                    <span class="hljs-attr">scales</span>: &#123;<br>                        <span class="hljs-attr">xAxes</span>: [&#123;<br>                            <span class="hljs-attr">stacked</span>: xstacked,<br>                            <span class="hljs-attr">ticks</span>: &#123;<br>                                <span class="hljs-attr">beginAtZero</span>: <span class="hljs-literal">true</span>,<br>                            &#125;,<br>                        &#125;],<br>                        <span class="hljs-attr">yAxes</span>: [&#123;<br>                            <span class="hljs-attr">stacked</span>: ystacked,<br>                            <span class="hljs-attr">ticks</span>: &#123;<br>                                <span class="hljs-attr">beginAtZero</span>: <span class="hljs-literal">true</span>,<br>                            &#125;,<br>                        &#125;],<br>                    &#125;,<br>                    <span class="hljs-attr">tooltips</span>: &#123;<br>                        <span class="hljs-attr">mode</span>: (xstacked || ystacked) ? <span class="hljs-string">&#x27;label&#x27;</span> : <span class="hljs-string">&#x27;single&#x27;</span>,<br>                    &#125;,<br>                &#125;,<br>            &#125;);<br>        &#125;<br>    &#125;;<br>    $.fn.<span class="hljs-property">chart</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> method </span>)&#123;<br>        <span class="hljs-keyword">if</span> ( methods[method] ) &#123;<br>            <span class="hljs-keyword">return</span> methods[ method ].<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>( <span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span> ));<br>        &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">typeof</span> method === <span class="hljs-string">&#x27;object&#x27;</span> || ! method ) &#123;<br>            <span class="hljs-keyword">return</span> methods.<span class="hljs-property">init</span>.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> );<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            $.<span class="hljs-title function_">error</span>( <span class="hljs-string">&#x27;Method &#x27;</span> +  method + <span class="hljs-string">&#x27; does not exist on jQuery.chart&#x27;</span> );<br>        &#125;<br>    &#125;;<br>&#125;)(jQuery);<br></code></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>在 markdown 中开头添加 js 引用路径，如下：</p><pre><code class="hljs">&lt;script src=&quot;/js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/js/Chart.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/js/chart.md.js&quot;&gt;&lt;/script&gt;</code></pre><p>想要渲染的文本使用 <code>&lt;canvas class=&quot;bar&quot; width=&quot;xxx&quot; height=&quot;xxx&quot;&gt;&lt;/canvas&gt;</code> 标记，数据使用 json 格式，如下：</p><pre><code class="hljs">&lt;canvas class=&quot;bar&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&#123;    &quot;title&quot;: &quot;I have Title&quot;,    &quot;item&quot;: [&quot;Red&quot;, &quot;Blue&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Purple&quot;, &quot;Orange&quot;],    &quot;type&quot;: &quot;horiz stack&quot;,    &quot;data&quot;: [&#123;            &quot;label&quot;: &quot;one&quot;,            &quot;data&quot;: [12, 19, 3, 5, 2, 3]        &#125;,&#123;            &quot;label&quot;: &quot;two&quot;,            &quot;data&quot;: [23, 34, 1, 0, 39, 22]        &#125;,&#123;            &quot;label&quot;: &quot;thrid&quot;,            &quot;data&quot;: [21, 0, 1, 20, 12, 15]        &#125;]&#125;&lt;/canvas&gt;</code></pre><blockquote><p>type：</p></blockquote><ul><li>horiz：条形图水平显示</li><li>over：一个条形图多个时叠加显示</li><li>stack：一个条形图多个时累加显示</li></ul><p>在文件末尾添加动作：</p><pre><code class="hljs">&lt;script&gt;    $(&quot;.bar&quot;).each(function()&#123;        $(this).chart(&#39;bar&#39;)    &#125;)&lt;/script&gt;</code></pre><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><canvas class="bar" width="400" height="400">{    "title": "I have Title",    "item": ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],    "type": "horiz stack",    "data": [{            "label": "one",            "data": [12, 19, 3, 5, 2, 3]        },{            "label": "two",            "data": [23, 34, 1, 0, 39, 22]        },{            "label": "thrid",            "data": [21, 0, 1, 20, 12, 15]        }]}</canvas><h2 id="解析器修改"><a href="#解析器修改" class="headerlink" title="解析器修改"></a>解析器修改</h2><p>markdown 渲染有不同的解析器，各个可能有差异，有些需要修改才能支持自己添加的 js 文件。</p><h3 id="OmniMarkupPreviewer"><a href="#OmniMarkupPreviewer" class="headerlink" title="OmniMarkupPreviewer"></a>OmniMarkupPreviewer</h3><p>OmniMarkupPreviewer 是 sublime 的插件，可以实时显示渲染 markdown 文档。<br>新添加的 js 文件可以放在以下目录：</p><pre><code class="hljs">C:\Users\xxx\AppData\Roaming\Sublime Text 3\Packages</code></pre><p>markdown 文件中 js 的路径如下：</p><pre><code class="hljs">&lt;script src=&quot;/public/xxx.js&quot;&gt;&lt;/script&gt;</code></pre><script>    $(".diagram").sequenceDiagram({theme: 'hand'});    $(".bar").each(function(){        $(this).chart('bar')    })</script>]]></content>
    
    
    <summary type="html">&lt;script src=&quot;/js/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/js/underscore-min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/js/raphael.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/js/sequence-diagram-min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/js/Chart.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/js/chart.md.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;用 Markdown 写文档，主要是省去了排版的麻烦，编辑也简单随便使用个文本编辑器就行。不过也有无力的时候，比如绘图等。&lt;br&gt;这里我使用一些现成的 js 库，完成一些复杂的功能。当然从简洁的角度这样不太优雅，但是可以保留原始数据方便修改，各有利弊吧。&lt;br&gt;以下方法使用是 html 语言，所以在 html 中也适用的。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://wishlily.github.io/categories/tools/"/>
    
    
    <category term="web" scheme="https://wishlily.github.io/tags/web/"/>
    
    <category term="markdown" scheme="https://wishlily.github.io/tags/markdown/"/>
    
    <category term="js" scheme="https://wishlily.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Arduino 101 Serial 实现详解</title>
    <link href="https://wishlily.github.io/article/arduino/2017/07/03/undefined/"/>
    <id>https://wishlily.github.io/article/arduino/2017/07/03/undefined/</id>
    <published>2017-07-03T07:03:26.000Z</published>
    <updated>2017-07-03T07:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Arduino 101 连接 PC 是通过一条方口 USB 数据线，并且可以通过这条数据线接收板子输出 debug 调试。<br>那么这是如何实现的呢？<br>这部分没有完全看透，只记录下目前收获（也许有误）。</p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Arduino 中操作串口是通过 Serial<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 类。</p><p><strong>初始化</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>    Serial.begin(<span class="hljs-number">9600</span>); <span class="hljs-comment">// 波特率设置为 9600</span><br>    <span class="hljs-keyword">while</span>(!Serial);     <span class="hljs-comment">// 等待串口初始化完成</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发送</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>    Serial.print(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接收</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">serialEvent</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// Called when data is available. Use Serial.read() to capture this data.</span><br>    Serial.print(Serial.read());<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>查看代码时发现了应用程序入口其实在 <code>main.cpp</code> 中，如下：</p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\cores\arduino\main.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">void</span> )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">initVariant</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(USBCON)</span><br>    USBDevice.<span class="hljs-built_in">attach</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-built_in">setup</span>();<br>    <span class="hljs-keyword">for</span> (;;) <span class="hljs-comment">/* This infinite loop is intentional and requested by design */</span><br>    &#123;<br>        <span class="hljs-built_in">loop</span>();<br>        <span class="hljs-keyword">if</span> (serialEventRun) <span class="hljs-built_in">serialEventRun</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从中可以看到 <code>setup</code> <code>loop</code> 等函数，这就是通用的 Arduino 代码函数块，可以发现 <code>loop</code> 和 <code>serialEvent</code> 其实是顺序轮询方式，并不是真正中断。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>Serial 部分的源码又在哪里呢？查找后发现对象初始化部分：</p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\variants\arduino_101\variant.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">uart_init_info info_cdc;<br><span class="hljs-function">CDCSerialClass <span class="hljs-title">Serial</span><span class="hljs-params">(&amp;info_cdc)</span></span>;<br><br>RingBuffer rx_buffer_uart;<br>RingBuffer tx_buffer_uart;<br>uart_init_info info_uart;<br><span class="hljs-function">UARTClass <span class="hljs-title">Serial1</span><span class="hljs-params">(&amp;info_uart, &amp;rx_buffer_uart, &amp;tx_buffer_uart)</span></span>;<br></code></pre></td></tr></table></figure><p>原来 Serial 是全局变量，<code>CDCSerialClass</code> 的构造函数只是赋值，并没有特殊操作。<br>现在已知如下（和板子定义一致）：</p><ul><li>Serial 表示 USB<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 串口</li><li>Serial1 表示 UART 串口</li></ul><p>接下来的操作在 <code>initVariant()</code> 中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initVariant</span><span class="hljs-params">( <span class="hljs-type">void</span> )</span> </span>&#123;<br>    <span class="hljs-comment">/* Initialise CDC-ACM shared buffers pointers, provided by LMT */</span><br>    Serial.<span class="hljs-built_in">setSharedData</span>(shared_data-&gt;cdc_acm_buffers);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Serial.setSharedData</code> 只是赋值串口对象指针。</p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\cores\arduino\CDCSerialClass.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CDCSerialClass::setSharedData</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> cdc_acm_shared_data *cdc_acm_shared_data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;_shared_data = cdc_acm_shared_data;<br>    <span class="hljs-keyword">this</span>-&gt;_rx_buffer = cdc_acm_shared_data-&gt;rx_buffer;<br>    <span class="hljs-keyword">this</span>-&gt;_tx_buffer = cdc_acm_shared_data-&gt;tx_buffer;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>shared_data</code> 是芯片中的 SRAM<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> 地址为 0xA8000000，共 80K<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p><p><img src="https://wishlily.github.io/images/article/arduino/2017/07/03/undefined/sram.png" alt="sram"></p><p>关于这段内存的作用，我推测是和内核部分进行交互，因为 <code>CDCSerialClass</code> 中并没有对寄存器的操作。<br>而内核部分也有同样的结构，并且会读取标志位以及设置标志位（内核部分没有详细查看）。<br>内核相关理解如下：</p><ul><li>代码入口在 <code>CODK\CODK-A\x86\projects\arduino101\quark\main.c</code></li><li>驱动部分代码 <code>CODK\CODK-A\x86\bsp\src\drivers\usb</code>（<code>usb_driver_intf</code> 没有找到声明地方）</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>以 <code>Serial.print</code> 实现为例，使用该函数会向串口发送字符串。</p><p><code>CDCSerialClass</code> 中并没有定义 <code>print</code> 的方法，此方法乃是继承 <code>class Print</code>，其所有继承关系如下：</p><pre><code class="hljs">CDCSerialClass-&gt;HardwareSerial-&gt;Stream-&gt;Print</code></pre><p>某个方法的实现如下：</p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\cores\arduino\Print.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">Print::print</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">write</span>(c);<br>&#125;<br></code></pre></td></tr></table></figure><p>而 <code>write</code> 方法在 <code>CDCSerialClass</code> 类中被重写为向串口发送数据，如此便实现了 <code>Serial.print</code> 的功能。</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p><code>CDCSerialClass</code> 中波特率设置似乎没有作用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CDCSerialClass::init</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> dwBaudRate, <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> modeReg)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/* Set a per-byte write delay approximately equal to the time it would</span><br><span class="hljs-comment">     * take to clock out a byte on a standard UART at this baud rate */</span><br>    _writeDelayUsec = <span class="hljs-number">8000000</span> / dwBaudRate;<br><br>    <span class="hljs-comment">/* Make sure both ring buffers are initialized back to empty.</span><br><span class="hljs-comment">     * Empty the Rx buffer but don&#x27;t touch Tx buffer: it is drained by the</span><br><span class="hljs-comment">     * LMT one way or another */</span><br>    _rx_buffer-&gt;tail = _rx_buffer-&gt;head;<br><br>    _shared_data-&gt;device_open = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上为初始化部分，从中可以看到 <code>dwBaudRate</code> 只计算了 <code>_writeDelayUsec</code>，没有传递到 <code>_shared_data</code> 中。<br>查找代码又会发现 <code>_writeDelayUsec</code> 没有在其他地方被调用过，那么该波特率还有作用吗？<br>为此我尝试在电脑上随便修改波特率，并和板子通信，发现波特率不匹配也可以通信，不知道是不是因为该口是 USB 虚拟串口的原因？<br>相对应的 <code>Serial1 UARTClass</code> 的 <code>init</code> 中是包含波特率设置代码的。</p><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>添加 <code>printf</code> 方法<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。<br>我使用的是添加 <code>Print::printf</code>，修改后可在 <code>Serial</code> 中使用 <code>printf</code> 方法了。</p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\cores\arduino\Print.cpp</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdarg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINTF_BUF 80</span><br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">Print::printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> buf[PRINTF_BUF];<br>    va_list ap;<br>    <span class="hljs-built_in">va_start</span>(ap, format);<br>    <span class="hljs-built_in">vsnprintf</span>(buf, <span class="hljs-built_in">sizeof</span>(buf), format, ap);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> *p = &amp;buf[<span class="hljs-number">0</span>]; *p; p++) &#123;<br>        <span class="hljs-keyword">if</span>(*p == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-built_in">write</span>(<span class="hljs-string">&#x27;\r&#x27;</span>);<br>        <span class="hljs-built_in">write</span>(*p);<br>    &#125;<br>    <span class="hljs-built_in">va_end</span>(ap);<br>&#125;<br></code></pre></td></tr></table></figure><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.arduino.cc/en/reference/serial">Serial func</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://zh.wikipedia.org/wiki/USB">USB CDC is a composite Universal Serial Bus device class</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.arduino.cc/en/Tutorial/Memory">static random access memory</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">Intel® Quark™ SE Microcontroller C1000 Datasheet, Table 24, Mapping Address Spaces</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;"><a href="https://playground.arduino.cc/Main/Printf">Arduino printf</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;Arduino 101 连接 PC 是通过一条方口 USB 数据线，并且可以通过这条数据线接收板子输出 debug 调试。&lt;br&gt;那么这是如何实现的呢？&lt;br&gt;这部分没有完全看透，只记录下目前收获（也许有误）。&lt;/p&gt;</summary>
    
    
    
    <category term="arduino" scheme="https://wishlily.github.io/categories/arduino/"/>
    
    
    <category term="arduino" scheme="https://wishlily.github.io/tags/arduino/"/>
    
    <category term="quark" scheme="https://wishlily.github.io/tags/quark/"/>
    
    <category term="usb" scheme="https://wishlily.github.io/tags/usb/"/>
    
  </entry>
  
  <entry>
    <title>GCC 常用</title>
    <link href="https://wishlily.github.io/article/tools/2017/06/15/undefined/"/>
    <id>https://wishlily.github.io/article/tools/2017/06/15/undefined/</id>
    <published>2017-06-15T09:17:48.000Z</published>
    <updated>2017-06-15T09:17:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些编译遇到的问题。<br>首先推荐陈皓的《<a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fscc.qibebt.cas.cn%2Fdocs%2Flinux%2Fbase%2F%25B8%25FA%25CE%25D2%25D2%25BB%25C6%25F0%25D0%25B4Makefile-%25B3%25C2%25F0%25A9.pdf">跟我一起写 Makefile</a>》，可以算是启蒙书了，一些参数的含义在这里也可以找到，非常方便。</p><span id="more"></span><h1 id="动态库导入静态库"><a href="#动态库导入静态库" class="headerlink" title="动态库导入静态库"></a>动态库导入静态库</h1><p>遇到需要编译一个动态库，但是其中包含两个静态库，怎么样能把他们编译到一起呢？<br>目标：<code>libmylib.so</code><br>源：<code>src1.c src2.c</code><br>库：<code>liba.a libb.a</code><br>依赖：<code>libmylib.so -&gt; libb.a -&gt; liba.a</code><br>目录：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── liba<br>│   └── liba<span class="hljs-selector-class">.a</span><br>├── libb<br>│   └── libb<span class="hljs-selector-class">.a</span><br>├── src1<span class="hljs-selector-class">.c</span><br>└── src2.c<br></code></pre></td></tr></table></figure><p>编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -fPIC -Wall src1.c src2.c -shared -o libmy.so -Llibb -lb -Lliba -la<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><code>-L</code> 后接静态库所在目录位置</li><li><code>-l</code> 后接静态库名字，去掉前面的 <code>lib</code> 以及文件类型 <code>.a</code></li><li><code>-Lxxx -lxxx</code> 需要放在最后</li><li>两个以上静态库时，被依赖的放在后面，如上 <code>b</code> 依赖 <code>a</code>，<code>a</code> 在后</li></ul><p>验证：使用以下命令确保未出现静态库中的函数名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nm libmylib.so | grep &quot;U &quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一些编译遇到的问题。&lt;br&gt;首先推荐陈皓的《&lt;a href=&quot;chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fscc.qibebt.cas.cn%2Fdocs%2Flinux%2Fbase%2F%25B8%25FA%25CE%25D2%25D2%25BB%25C6%25F0%25D0%25B4Makefile-%25B3%25C2%25F0%25A9.pdf&quot;&gt;跟我一起写 Makefile&lt;/a&gt;》，可以算是启蒙书了，一些参数的含义在这里也可以找到，非常方便。&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://wishlily.github.io/categories/tools/"/>
    
    
    <category term="gcc" scheme="https://wishlily.github.io/tags/gcc/"/>
    
    <category term="c" scheme="https://wishlily.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Arduino 101 GPIO 实现详解</title>
    <link href="https://wishlily.github.io/article/arduino/2017/04/20/undefined/"/>
    <id>https://wishlily.github.io/article/arduino/2017/04/20/undefined/</id>
    <published>2017-04-20T07:52:30.000Z</published>
    <updated>2017-04-20T07:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近买了一块 Arduino 101 开发版，准备学习研究一下。<br>首先从最简单的 GPIO 开始。</p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>要知道 GPIO 基本上都是 CPU 直接控制的，我们先查找一下 CPU 的资料。</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>主控制器是 Intel® Curie™ Module <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，其整体结构图如下：<br><img src="https://wishlily.github.io/images/article/arduino/2017/04/20/undefined/Intel_Curie_Module.png" alt="Intel® Curie™ Module"><br>这是一个集成的控制芯片，我们发现其中的真正微控制器其实是 Intel® Quark™ SE Microcontroller C1000 <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，其结构框图如下：<br><img src="https://wishlily.github.io/images/article/arduino/2017/04/20/undefined/Intel_Quark_C1000.png" alt="Intel® Quark™ SE Microcontroller C1000 Block Diagram"></p><h2 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h2><p>手册中 1.10 节概述了 GPIO 控制器如下：</p><blockquote><p>GPIO Controller</p></blockquote><ul><li>Provides 32 independently configurable GPIOs</li><li>All GPIOs are interrupt capable, supporting level sensitive and edge triggered modes</li><li>Debounce logic for interrupt source</li><li>16 additional GPIOs available via Sensor Subsystem</li><li>6 additional Always-on interrupt and wake capable GPIOs</li></ul><p>概括来说 GPIO 由三部分组成：</p><ul><li>32 个独立配置口（暂用 <code>SOC_GPIO_32</code> 代表）</li><li>16 个额外通过传感器子系统提供（暂用 <code>SS_GPIO_16</code> 代表）</li><li>6 个额外提供中断及唤醒口（暂用 <code>AON_GPIO_6</code> 代表）</li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>Arduino 自带的 Blink 程序就是控制 GPIO 高低，从而开关 LED 灯。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// the setup function runs once when you press reset or power the board</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// initialize digital pin LED_BUILTIN as an output.</span><br>    pinMode(LED_BUILTIN, OUTPUT);<br>&#125;<br><br><span class="hljs-comment">// the loop function runs over and over again forever</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>    digitalWrite(LED_BUILTIN, HIGH);   <span class="hljs-comment">// turn the LED on (HIGH is the voltage level)</span><br>    delay(<span class="hljs-number">1000</span>);                       <span class="hljs-comment">// wait for a second</span><br>    digitalWrite(LED_BUILTIN, LOW);    <span class="hljs-comment">// turn the LED off by making the voltage LOW</span><br>    delay(<span class="hljs-number">1000</span>);                       <span class="hljs-comment">// wait for a second</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre><code class="hljs">void pinMode( uint8_t pin, uint8_t mode )</code></pre><ul><li>pin: Arduino 定义的 GPIO 编号</li><li>mode: INPUT，INPUT_PULLUP，OUTPUT</li></ul><p>那么这个函数是怎么一步步配置到寄存器的呢？<br>首先找到 <code>pinMode</code> 函数实现如下：</p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\cores\arduino\wiring_digital.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">pinMode</span><span class="hljs-params">( <span class="hljs-type">uint8_t</span> pin, <span class="hljs-type">uint8_t</span> mode )</span><br>&#123;<br>    <span class="hljs-comment">/* 101 NUM_DIGITAL_PINS=32 */</span><br>    <span class="hljs-keyword">if</span> (pin &gt;= NUM_DIGITAL_PINS) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">/* g_APinDescription 为映射结构体数组 */</span><br>    PinDescription *p = &amp;g_APinDescription[pin];<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>PinDescription</code> 映射配置结构体包含如下：</p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\cores\arduino\Arduino.h</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PinDescription</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint32_t</span>                ulGPIOId;               <span class="hljs-comment">// GPIO port pin</span><br>    <span class="hljs-type">uint32_t</span>                ulGPIOPort;             <span class="hljs-comment">// GPIO port ID</span><br>    <span class="hljs-type">uint32_t</span>                ulGPIOType;             <span class="hljs-comment">// LMT or SS</span><br>    <span class="hljs-type">uint32_t</span>                ulGPIOBase;             <span class="hljs-comment">// GPIO register base address</span><br>    <span class="hljs-type">uint32_t</span>                ulSocPin;               <span class="hljs-comment">// SoC pin number</span><br>    <span class="hljs-type">uint32_t</span>                ulPinMode;              <span class="hljs-comment">// Current SoC pin mux mode</span><br>    <span class="hljs-type">uint32_t</span>                ulPwmChan;              <span class="hljs-comment">// PWM channel</span><br>    <span class="hljs-type">uint32_t</span>                ulPwmScale;             <span class="hljs-comment">// PWM frequency scaler</span><br>    <span class="hljs-type">uint32_t</span>                ulAdcChan;              <span class="hljs-comment">// ADC channel</span><br>    <span class="hljs-type">uint32_t</span>                ulInputMode;            <span class="hljs-comment">// Pin mode</span><br>&#125; PinDescription;<br></code></pre></td></tr></table></figure><p><code>g_APinDescription</code> 就是提前配置好的全局结构体数组，输入 <code>pin=LED_BUILTIN</code>，即编号十三引脚。</p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\variants\arduino_101\pins_arduino.h</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> LED_BUILTIN = <span class="hljs-number">13</span>;<br></code></pre></td></tr></table></figure><p>而十三引脚的映射如下：</p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\variants\arduino_101\variant.cpp</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">PinDescription g_APinDescription[]=&#123;<br>    ...<br>    &#123;<span class="hljs-number">8</span>, SOC_GPIO_32, SOC_GPIO, SOC_GPIO_BASE_ADDR, <span class="hljs-number">42</span>, GPIO_MUX_MODE, INVALID, INVALID, INVALID, INPUT_MODE&#125;, <span class="hljs-comment">// Arduino IO13</span><br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>mode=OUTPUT</code> 把编号十三引脚设置为输出模式，进入如下分支（<code>ulGPIOType=SOC_GPIO</code>）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">pinMode</span><span class="hljs-params">( <span class="hljs-type">uint8_t</span> pin, <span class="hljs-type">uint8_t</span> mode )</span> &#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (mode == OUTPUT) &#123;<br>        ...<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p-&gt;ulGPIOType == SOC_GPIO) &#123;<br>            <span class="hljs-type">uint32_t</span> reg = p-&gt;ulGPIOBase + SOC_GPIO_SWPORTA_DDR;<br>            SET_MMIO_BIT(reg, p-&gt;ulGPIOId);<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出映射到的寄存器地址是 0xB0000C04，<br><em>（reg &#x3D; SOC_GPIO_BASE_ADDR + SOC_GPIO_SWPORTA_DDR）</em></p><blockquote><p>C:\Users\XXX\AppData\Local\Arduino15\packages\Intel\hardware\arc32\2.0.2\system\libarc32_arduino101\common\scss_registers.h</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOC_GPIO_BASE_ADDR              0xB0000C00</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOC_GPIO_SWPORTA_DDR            0x04</span><br></code></pre></td></tr></table></figure><p><code>SET_MMIO_BIT</code> 是在 0xB0000C04 地址 bit 8 位设置为 1。</p><p>查找手册相应说明如下：</p><p><img src="https://wishlily.github.io/images/article/arduino/2017/04/20/undefined/PortA_DDR.png" alt="GPIO_SWPORTA_DDR"></p><p>即把 <code>SOC_GPIO_32[8]</code> 设置为输出，那么 LED 实际上到底是不是 <code>GPIO[8]</code> 呢？<br>原理图 LED 部分如下：</p><p><img src="https://wishlily.github.io/images/article/arduino/2017/04/20/undefined/LED_sch.png" alt="LED_sch"></p><p>而 <code>ATPSCK/IO2_3V_IO13</code> 和 Curie 芯片有两处相连接，分别是 <code>SPI1_M_SCK</code> 和 <code>ATP_SPI_S_SCK</code>，<br>在 Curie 中找到相应引脚信息如下：</p><p><img src="https://wishlily.github.io/images/article/arduino/2017/04/20/undefined/LED_pin_map.png" alt="SPI1_M_SCK"></p><p>如此证明之前的推测是正确的，<code>SOC_GPIO_32[8]</code> 控制着 LED 开关，GPIO 为高时，LED 亮，反之，LED 灭。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><pre><code class="hljs">void digitalWrite( uint8_t pin, uint8_t val )</code></pre><ul><li>pin: 0~31</li><li>val: HIGH，LOW</li></ul><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><pre><code class="hljs">int digitalRead( uint8_t pin )</code></pre><ul><li>pin: 0~31</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由上面分析可知，程序是通过一个事先定义好的映射表来查找对应的寄存器地址，再来设置相应的数据。<br>较重要的几个文件是：</p><ul><li>wiring_digital.c：设置 GPIO 寄存器，包括初始化，读和写</li><li>variant.cpp：配置映射表</li><li>scss_registers.h：寄存器地址</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="SOC-GPIO-32"><a href="#SOC-GPIO-32" class="headerlink" title="SOC_GPIO_32"></a>SOC_GPIO_32</h3><ol><li><code>GPIO_SWPORTA_DDR</code> 设置输入&#x2F;输出口</li><li><code>PMUX_PULLUP [0..3]</code> 设置是否使能上拉<blockquote><p>这是一个多路复用寄存器可以设置外部引脚是否为上拉输入，<br> 寄存器和引脚的映射，我没有找到明确的解释，但是查看官方的软件说明<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>后，<br> 我基本确定 4 × 32 的寄存器标号即 <code>EXTERNAL_PAD_XX</code> 中 <code>XX</code> 标号<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。<br> 如：GPIO[8] 为 <code>EXTERNAL_PAD_42</code> 那么如果设置其为上拉，<br> 则，<code>PMUX_PULLUP[1] bit 10 = 1</code>。<br> ps，手册中有两种封装，因为我们用的是 Curie 芯片，该芯片使用的是 WLCSP 封装，所以查看引脚表格也是看该封装的。</p></blockquote></li><li><code>PMUX_SEL [0..5]</code> 设置引脚复用</li></ol><h3 id="SS-GPIO-16"><a href="#SS-GPIO-16" class="headerlink" title="SS_GPIO_16"></a>SS_GPIO_16</h3><blockquote><p>在手册中我没有找到该部分寄存器定义，以下根据程序得出</p></blockquote><ol><li><code>SS_GPIO0_SWPORTA_DDR</code> or <code>SS_GPIO1_SWPORTA_DDR</code> 设置输入&#x2F;输出</li><li><code>PMUX_PULLUP [0..3]</code> 设置是否使能上拉</li><li><code>PMUX_SEL [0..5]</code> 设置引脚复用</li></ol><h3 id="AON-GPIO-6"><a href="#AON-GPIO-6" class="headerlink" title="AON_GPIO_6"></a>AON_GPIO_6</h3><ol><li><code>GPIO_AON_SWPORTA_DDR</code> 设置是输入&#x2F;输出</li><li><code>PMUX_PULLUP [0..3]</code> 设置是否使能上拉</li><li><code>PMUX_SEL [0..5]</code> 设置引脚复用</li></ol><h2 id="读"><a href="#读" class="headerlink" title="读"></a>读</h2><h3 id="SOC-GPIO-32-1"><a href="#SOC-GPIO-32-1" class="headerlink" title="SOC_GPIO_32"></a>SOC_GPIO_32</h3><p>读取 <code>GPIO_EXT_PORTA</code> 寄存器状态</p><h3 id="SS-GPIO-16-1"><a href="#SS-GPIO-16-1" class="headerlink" title="SS_GPIO_16"></a>SS_GPIO_16</h3><p>读取 <code>SS_GPIO_EXT_PORTA</code> 寄存器状态</p><h3 id="AON-GPIO-6-1"><a href="#AON-GPIO-6-1" class="headerlink" title="AON_GPIO_6"></a>AON_GPIO_6</h3><p>读取 <code>GPIO_AON_EXT_PORTA</code> 寄存器状态</p><h2 id="写"><a href="#写" class="headerlink" title="写"></a>写</h2><h3 id="SOC-GPIO-32-2"><a href="#SOC-GPIO-32-2" class="headerlink" title="SOC_GPIO_32"></a>SOC_GPIO_32</h3><ol><li>写入 <code>GPIO_SWPORTA_DR</code> 寄存器</li><li>设置 <code>PMUX_PULLUP [0..3]</code> 是否使能上拉</li></ol><h3 id="SS-GPIO-16-2"><a href="#SS-GPIO-16-2" class="headerlink" title="SS_GPIO_16"></a>SS_GPIO_16</h3><ol><li>写入 <code>SS_GPIO_SWPORTA_DR</code> 寄存器</li><li>设置 <code>PMUX_PULLUP [0..3]</code> 是否使能上拉</li></ol><h3 id="AON-GPIO-6-2"><a href="#AON-GPIO-6-2" class="headerlink" title="AON_GPIO_6"></a>AON_GPIO_6</h3><ol><li>写入 <code>GPIO_AON_SWPORTA_DR</code> 寄存器</li><li>设置 <code>PMUX_PULLUP [0..3]</code> 是否使能上拉</li></ol><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.intel.com/content/www/us/en/support/boards-and-kits/intel-curie-modules/000022330.html">Datasheet for the Intel® Curie™ Module</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fwww.intel.com%2Fcontent%2Fdam%2Fwww%2Fpublic%2Fus%2Fen%2Fdocuments%2Fdatasheets%2Fquark-c1000-datasheet.pdf">Intel® Quark™ SE Microcontroller C1000 Datasheet</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fwww.intel.com%2Fcontent%2Fdam%2Fwww%2Fpublic%2Fus%2Fen%2Fdocuments%2Freference-guides%2Fquark-software-interface-pin-multiplexing-reference-guide.pdf">Intel®Quark™Microcontroller Software Interface Pin Multiplexing Reference Guide</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">Intel® Quark™ SE Microcontroller C1000 Datasheet, 3.5, Ballmap Name</span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近买了一块 Arduino 101 开发版，准备学习研究一下。&lt;br&gt;首先从最简单的 GPIO 开始。&lt;/p&gt;</summary>
    
    
    
    <category term="arduino" scheme="https://wishlily.github.io/categories/arduino/"/>
    
    
    <category term="arduino" scheme="https://wishlily.github.io/tags/arduino/"/>
    
    <category term="quark" scheme="https://wishlily.github.io/tags/quark/"/>
    
    <category term="gpio" scheme="https://wishlily.github.io/tags/gpio/"/>
    
  </entry>
  
  <entry>
    <title>谢尔宾斯基三角形</title>
    <link href="https://wishlily.github.io/article/code/2017/04/07/undefined/"/>
    <id>https://wishlily.github.io/article/code/2017/04/07/undefined/</id>
    <published>2017-04-07T06:54:36.000Z</published>
    <updated>2017-04-07T06:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 golang 绘制一个带颜色的谢尔宾斯基三角形。</p><span id="more"></span><h1 id="定义1"><a href="#定义1" class="headerlink" title="定义1"></a>定义<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h1><p>使用去掉中心法：</p><ol><li>取一个实心的三角形（多数使用等边三角形）</li><li>沿三边中点的连线，将它分成四个小三角形</li><li>去掉中间的那一个小三角形</li><li>对其余三个小三角形重复 1~4 步骤</li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><p>因为需要上色，首先需要一个三角形填充函数。<br>我的做法是首先将三角形四边边界求出，然后逐点判断是否在三角形内部<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    _TRIANGLE_SIDE = <span class="hljs-literal">false</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangle_cross</span><span class="hljs-params">(a, b, c image.Point)</span></span> <span class="hljs-type">int</span> &#123;<br>    ab := image.Point&#123;b.X - a.X, b.Y - a.Y&#125;<br>    ac := image.Point&#123;c.X - a.X, c.Y - a.Y&#125;<br>    <span class="hljs-keyword">return</span> ab.X*ac.Y - ab.Y*ac.X<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangle_right_side</span><span class="hljs-params">(a, b, c image.Point)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">if</span> triangle_cross(a, b, c) &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 排序</span><br><span class="hljs-comment"> * 最靠近 x 轴的点为第一个点，剩下逆时针排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangle_sort</span><span class="hljs-params">(a, b, c image.Point)</span></span> (image.Point, image.Point, image.Point) &#123;<br>    sort := []image.Point&#123;a, b, c&#125;<br>    n := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;<br>        <span class="hljs-keyword">if</span> sort[i].Y &lt; sort[n].Y &#123;<br>            n = i<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> sort[i].Y == sort[n].Y &#123;<br>            <span class="hljs-keyword">if</span> sort[i].X &lt; sort[n].X &#123;<br>                n = i<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> n != <span class="hljs-number">0</span> &#123;<br>        t := sort[<span class="hljs-number">0</span>]<br>        sort[<span class="hljs-number">0</span>] = sort[n]<br>        sort[n] = t<br>    &#125;<br>    <span class="hljs-keyword">if</span> triangle_right_side(sort[<span class="hljs-number">0</span>], sort[<span class="hljs-number">1</span>], sort[<span class="hljs-number">2</span>]) == _TRIANGLE_SIDE &#123;<br>        <span class="hljs-keyword">return</span> sort[<span class="hljs-number">0</span>], sort[<span class="hljs-number">1</span>], sort[<span class="hljs-number">2</span>]<br>    &#125;<br>    <span class="hljs-keyword">return</span> sort[<span class="hljs-number">0</span>], sort[<span class="hljs-number">2</span>], sort[<span class="hljs-number">1</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangle_min</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &lt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangle_max</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &gt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangle_1</span><span class="hljs-params">(img *image.RGBA, A, B, C image.Point, c color.Color)</span></span> &#123;<br>    A, B, C = triangle_sort(A, B, C)<br>    <span class="hljs-comment">// fmt.Println(A, B, C)</span><br><br>    <span class="hljs-comment">// 扫描正方形</span><br>    x_min, x_max := A.X, A.X<br>    y_min, y_max := A.Y, A.Y<br><br>    x_min = triangle_min(x_min, B.X)<br>    x_min = triangle_min(x_min, C.X)<br>    x_max = triangle_max(x_max, B.X)<br>    x_max = triangle_max(x_max, C.X)<br><br>    y_min = triangle_min(y_min, B.Y)<br>    y_min = triangle_min(y_min, C.Y)<br>    y_max = triangle_max(y_max, B.Y)<br>    y_max = triangle_max(y_max, C.Y)<br><br>    <span class="hljs-keyword">for</span> i := x_min; i &lt;= x_max; i++ &#123;<br>        <span class="hljs-keyword">for</span> j := y_min; j &lt;= y_max; j++ &#123;<br>            D := image.Point&#123;i, j&#125;<br>            <span class="hljs-keyword">if</span> triangle_right_side(A, B, D) == _TRIANGLE_SIDE &amp;&amp;<br>                triangle_right_side(B, C, D) == _TRIANGLE_SIDE &amp;&amp;<br>                triangle_right_side(C, A, D) == _TRIANGLE_SIDE &#123;<br>                img.Set(i, j, c)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看资料<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>由图片启发，可以从顶点开始 S 形式扫描，但是以下的代码并不是所有三角形都能绘制，目前还未想好如何不增加计算时间又能改进的办法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/* <span class="hljs-doctag">BUG:</span> 一些锐角三角形无法绘出 */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangle_2</span><span class="hljs-params">(img *image.RGBA, A, B, C image.Point, c color.Color)</span></span> &#123;<br>    A, B, C = triangle_sort(A, B, C)<br>    <span class="hljs-comment">// fmt.Println(A, B, C)</span><br><br>    <span class="hljs-comment">// 蛇字形扫描</span><br>    x_min, x_max := A.X, A.X<br>    x_min = triangle_min(x_min, B.X)<br>    x_min = triangle_min(x_min, C.X)<br>    x_max = triangle_max(x_max, B.X)<br>    x_max = triangle_max(x_max, C.X)<br><br>    x := A.X<br>    x_step := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> y, loop := A.Y, <span class="hljs-literal">true</span>; loop; y++ &#123;<br>        loop = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">for</span> ; x &gt;= x_min &amp;&amp; x &lt;= x_max; x += x_step &#123;<br>            D := image.Point&#123;x, y&#125;<br>            <span class="hljs-keyword">if</span> triangle_right_side(A, B, D) == _TRIANGLE_SIDE &amp;&amp;<br>                triangle_right_side(B, C, D) == _TRIANGLE_SIDE &amp;&amp;<br>                triangle_right_side(C, A, D) == _TRIANGLE_SIDE &#123;<br>                loop = <span class="hljs-literal">true</span><br>                img.Set(x, y, c)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> loop &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        x_step *= <span class="hljs-number">-1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="谢尔宾斯基三角"><a href="#谢尔宾斯基三角" class="headerlink" title="谢尔宾斯基三角"></a>谢尔宾斯基三角</h2><p>通过递归函数绘制，颜色未指定则随机生成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sierpinski_fc</span><span class="hljs-params">(img *image.RGBA, A, B, C image.Point, c []color.Color)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(c) &lt;= <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    triangle_1(img, A, B, C, c[<span class="hljs-number">0</span>])<br>    D := image.Point&#123;(A.X + B.X) / <span class="hljs-number">2</span>, (A.Y + B.Y) / <span class="hljs-number">2</span>&#125;<br>    E := image.Point&#123;(B.X + C.X) / <span class="hljs-number">2</span>, (B.Y + C.Y) / <span class="hljs-number">2</span>&#125;<br>    F := image.Point&#123;(C.X + A.X) / <span class="hljs-number">2</span>, (C.Y + A.Y) / <span class="hljs-number">2</span>&#125;<br>    c1 := c[<span class="hljs-number">1</span>:]<br>    sierpinski_fc(img, A, D, F, c1)<br>    sierpinski_fc(img, D, B, E, c1)<br>    sierpinski_fc(img, F, E, C, c1)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sierpinski</span><span class="hljs-params">(img *image.RGBA, x, y <span class="hljs-type">int</span>)</span></span> &#123;<br>    A := image.Point&#123;x / <span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;<br>    B := image.Point&#123;<span class="hljs-number">0</span>, y&#125;<br>    C := image.Point&#123;x, y&#125;<br>    c := []color.Color&#123;<br>    <span class="hljs-comment">// color.RGBA&#123;0xEC, 0xD6, 0xC6, 255&#125;,</span><br>    <span class="hljs-comment">// color.RGBA&#123;0xD4, 0xDA, 0x90, 255&#125;,</span><br>    <span class="hljs-comment">// color.RGBA&#123;0xC1, 0xBC, 0x44, 255&#125;,</span><br>    <span class="hljs-comment">// color.RGBA&#123;0x63, 0x21, 0x5D, 255&#125;,</span><br>    <span class="hljs-comment">// color.RGBA&#123;0xB4, 0x3C, 0xAC, 255&#125;,</span><br>    <span class="hljs-comment">// color.RGBA&#123;0xD6, 0x85, 0xCB, 255&#125;,</span><br>    <span class="hljs-comment">// color.RGBA&#123;0xA1, 0x36, 0x5F, 255&#125;,</span><br>    &#125;<br>    s := rand.NewSource(time.Now().Unix())<br>    r := rand.New(s)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(c) == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++ &#123;<br>            t := r.Intn(<span class="hljs-number">0xFFFFFF</span>)<br>            c_r := <span class="hljs-type">uint8</span>(t &gt;&gt; <span class="hljs-number">16</span>)<br>            c_b := <span class="hljs-type">uint8</span>(t &gt;&gt; <span class="hljs-number">8</span>)<br>            c_g := <span class="hljs-type">uint8</span>(t)<br>            c = <span class="hljs-built_in">append</span>(c, color.RGBA&#123;c_r, c_b, c_g, <span class="hljs-number">255</span>&#125;)<br>        &#125;<br>    &#125;<br>    sierpinski_fc(img, A, B, C, c)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test_sierpinski</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    <span class="hljs-keyword">const</span> (<br>        x = <span class="hljs-number">4000</span><br>        y = <span class="hljs-number">3500</span><br>    )<br>    img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, x, y))<br>    sierpinski(img, x, y)<br>    f, _ := os.OpenFile(<span class="hljs-string">&quot;sierpinski.png&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class="hljs-number">0600</span>)<br>    <span class="hljs-keyword">defer</span> f.Close()<br>    png.Encode(f, img)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://wishlily.github.io/images/article/code/2017/04/07/undefined/sierpinski.png"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://zh.wikipedia.org/wiki/%E8%AC%9D%E7%88%BE%E8%B3%93%E6%96%AF%E5%9F%BA%E4%B8%89%E8%A7%92%E5%BD%A2">维基百科：谢尔宾斯基三角形</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.cnblogs.com/graphics/archive/2010/08/05/1793393.html">判断点是否在三角形内</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.zhihu.com/question/34100482">知乎：三角形填充算法</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="http://people.csail.mit.edu/ericchan/bib/pdf/p17-pineda.pdf">A Parallel Algorithm for Polygon Rasterization</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 golang 绘制一个带颜色的谢尔宾斯基三角形。&lt;/p&gt;</summary>
    
    
    
    <category term="code" scheme="https://wishlily.github.io/categories/code/"/>
    
    
    <category term="golang" scheme="https://wishlily.github.io/tags/golang/"/>
    
    <category term="draw" scheme="https://wishlily.github.io/tags/draw/"/>
    
    <category term="分形" scheme="https://wishlily.github.io/tags/%E5%88%86%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>IFS</title>
    <link href="https://wishlily.github.io/article/code/2017/04/01/undefined/"/>
    <id>https://wishlily.github.io/article/code/2017/04/01/undefined/</id>
    <published>2017-04-01T06:11:50.000Z</published>
    <updated>2017-04-01T06:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>迭代函数系统 IFS（Iterated Function System），真的是简单即复杂。</p><span id="more"></span><h1 id="IFS-System"><a href="#IFS-System" class="headerlink" title="IFS-System"></a>IFS-System</h1><p>几组二元一次方程组：<br>$$<br>x_{n+1}&#x3D;ax_n+by_n+e\\<br>y_{n+1}&#x3D;cx_n+by_n+f<br>$$<br>不同概率下迭代生成所有点的集合。</p><p>必要参数：</p><ul><li>$n$ 组 $a,b,c,d,e,f$ 的参数</li><li>$n$ 个概率值 $p$，$\sum_0^np&#x3D;1$</li><li>一组起始点 $x_0,y_0$</li></ul><p>一句话总结就是<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>：</p><pre><code class="hljs">IFS = 二元一次方程组 + 参数表 + 概率</code></pre><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>使用 golang 生成 IFS 分形图形。<br>每次迭代需要掷骰子根据概率选择使用那组参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    _IFS_PARAM_NUM = <span class="hljs-number">7</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ifs_f</span><span class="hljs-params">(a, b, e, c, d, f <span class="hljs-type">float64</span>, x, y <span class="hljs-type">float64</span>)</span></span> (<span class="hljs-type">float64</span>, <span class="hljs-type">float64</span>) &#123;<br>    x1 := a*x + b*y + e<br>    y1 := c*x + d*y + f<br>    <span class="hljs-keyword">return</span> x1, y1<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ifs_cal</span><span class="hljs-params">(a [][]<span class="hljs-type">float64</span>, x, y <span class="hljs-type">float64</span>, r *rand.Rand)</span></span> (<span class="hljs-type">float64</span>, <span class="hljs-type">float64</span>) &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) &lt;= <span class="hljs-number">0</span> || <span class="hljs-built_in">len</span>(a[<span class="hljs-number">0</span>]) != _IFS_PARAM_NUM &#123;<br>        <span class="hljs-keyword">return</span> x, y<br>    &#125;<br>    p := r.Float64()<br>    c := <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(a); i++ &#123;<br>        c += a[i][_IFS_PARAM_NUM<span class="hljs-number">-1</span>]<br>        <span class="hljs-keyword">if</span> p &lt;= c &#123;<br>            x1, y1 := ifs_f(<br>                a[i][<span class="hljs-number">0</span>], a[i][<span class="hljs-number">1</span>], a[i][<span class="hljs-number">4</span>],<br>                a[i][<span class="hljs-number">2</span>], a[i][<span class="hljs-number">3</span>], a[i][<span class="hljs-number">5</span>],<br>                x, y)<br>            <span class="hljs-keyword">return</span> x1, y1<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x, y<br>&#125;<br></code></pre></td></tr></table></figure><p>经过 n 次迭代将点画在画布上。<br>以下计算两次为了找到边界值，好转换坐标。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ifs</span><span class="hljs-params">(img *image.RGBA, limit_x, limit_y <span class="hljs-type">int</span>)</span></span> &#123;<br>    a := [][]<span class="hljs-type">float64</span>&#123;<br>        <span class="hljs-comment">// tree</span><br>        &#123;<span class="hljs-number">0.195</span>, <span class="hljs-number">-0.488</span>, <span class="hljs-number">0.344</span>, <span class="hljs-number">0.433</span>, <span class="hljs-number">0.4431</span>, <span class="hljs-number">0.2452</span>, <span class="hljs-number">0.25</span>&#125;,<br>        &#123;<span class="hljs-number">0.462</span>, <span class="hljs-number">0.414</span>, <span class="hljs-number">-0.252</span>, <span class="hljs-number">0.361</span>, <span class="hljs-number">0.2511</span>, <span class="hljs-number">0.5692</span>, <span class="hljs-number">0.25</span>&#125;,<br>        &#123;<span class="hljs-number">-0.058</span>, <span class="hljs-number">-0.07</span>, <span class="hljs-number">0.453</span>, <span class="hljs-number">-0.111</span>, <span class="hljs-number">0.5976</span>, <span class="hljs-number">0.0969</span>, <span class="hljs-number">0.25</span>&#125;,<br>        &#123;<span class="hljs-number">-0.035</span>, <span class="hljs-number">0.07</span>, <span class="hljs-number">-0.469</span>, <span class="hljs-number">-0.022</span>, <span class="hljs-number">0.4884</span>, <span class="hljs-number">0.5069</span>, <span class="hljs-number">0.2</span>&#125;,<br>        &#123;<span class="hljs-number">-0.637</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.501</span>, <span class="hljs-number">0.8562</span>, <span class="hljs-number">0.2513</span>, <span class="hljs-number">0.05</span>&#125;,<br>    &#125;<br><br>    s := rand.NewSource(time.Now().Unix())<br>    r := rand.New(s)<br><br>    x0 := r.Float64()<br>    y0 := r.Float64()<br><br>    x, y := x0, y0<br>    x_min, x_max := x, x<br>    y_min, y_max := y, y<br><br>    loop := limit_x * limit_y / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; loop; i++ &#123;<br>        x, y = ifs_cal(a, x, y, r)<br>        <span class="hljs-keyword">if</span> x &lt; x_min &#123;<br>            x_min = x<br>        &#125;<br>        <span class="hljs-keyword">if</span> x &gt; x_max &#123;<br>            x_max = x<br>        &#125;<br>        <span class="hljs-keyword">if</span> y &lt; y_min &#123;<br>            y_min = y<br>        &#125;<br>        <span class="hljs-keyword">if</span> y &gt; y_max &#123;<br>            y_max = y<br>        &#125;<br>    &#125;<br>    x, y = x0, y0<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; loop; i++ &#123;<br>        x, y = ifs_cal(a, x, y, r)<br>        ix := (x - x_min) * <span class="hljs-type">float64</span>(limit_x) / (x_max - x_min)<br>        iy := (y - y_min) * <span class="hljs-type">float64</span>(limit_y) / (y_max - y_min)<br>        point(img, <span class="hljs-type">int</span>(ix), <span class="hljs-type">int</span>(iy), color.Gray&#123;<span class="hljs-number">0</span>&#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成树形图<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>如下（图像已经过旋转处理）：<br><img src="https://wishlily.github.io/images/article/code/2017/04/01/undefined/ifs_tree.png"></p><p>如果想要方程组参数自动生成可使用如下函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ifs_array_generate</span><span class="hljs-params">(r *rand.Rand)</span></span> [][]<span class="hljs-type">float64</span> &#123;<br>    a := [][]<span class="hljs-type">float64</span>&#123;&#125;<br>    p := <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> p &lt; <span class="hljs-number">1</span> &#123;<br>        tp := r.Float64()<br>        <span class="hljs-keyword">if</span> p+tp &lt;= <span class="hljs-number">1</span> &#123;<br>            p += tp<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tp = <span class="hljs-number">1</span> - p<br>            p = <span class="hljs-number">1</span><br>        &#125;<br>        arr := [_IFS_PARAM_NUM]<span class="hljs-type">float64</span>&#123;&#125;<br>        arr[_IFS_PARAM_NUM<span class="hljs-number">-1</span>] = tp<br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; _IFS_PARAM_NUM<span class="hljs-number">-1</span>; i++ &#123;<br>            arr[i] = <span class="hljs-number">2</span>*r.Float64() - <span class="hljs-number">1</span><br>        &#125;<br>        a = <span class="hljs-built_in">append</span>(a, arr[:])<br>    &#125;<br>    <span class="hljs-keyword">return</span> a<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="欣赏"><a href="#欣赏" class="headerlink" title="欣赏"></a>欣赏</h1><p>根据不同的参数可以生成不同的图像，以下为比较典型的一些<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>：</p><p><img src="https://wishlily.github.io/images/article/code/2017/04/01/undefined/ifs_sprial.png"><br><img src="https://wishlily.github.io/images/article/code/2017/04/01/undefined/ifs_leaf.png"><br><img src="https://wishlily.github.io/images/article/code/2017/04/01/undefined/ifs_flourish.png"></p><p>下面是随机生成的：</p><p>这张有些像宇宙星系！</p><pre><code class="hljs">&#123;-0.889272, 0.656922, -0.927109, -0.322378, 0.856565, 0.478706, 0.937723&#125;,&#123;0.411268, -0.581772, 0.998787, -0.631693, -0.731553, 0.226007, 0.0622774&#125;,</code></pre><p><img src="https://wishlily.github.io/images/article/code/2017/04/01/undefined/ifs_nebula.png"></p><p>这张有些抽象。</p><pre><code class="hljs">&#123;-0.872001, 0.0808141, 0.205013, 0.726129, -0.133041, -0.287383, 0.790841&#125;,&#123;0.148498, -0.880393, 0.901023, 0.567552, 0.99911, 0.760125, 0.209159&#125;,</code></pre><p><img src="https://wishlily.github.io/images/article/code/2017/04/01/undefined/ifs_ball.png"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://huangfeihome.iteye.com/blog/1847204">IFS分形艺术</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.douban.com/note/230496472/?type=like#sep">经典的分形算法：迭代函数系IFS</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/NosicLin/ScDraw/wiki/IFS%E7%AE%97%E6%B3%95%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2#%E5%8D%B7%E6%9B%B2%E7%9A%84%E5%8F%B6%E5%AD%90">IFS算法绘制图形</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;迭代函数系统 IFS（Iterated Function System），真的是简单即复杂。&lt;/p&gt;</summary>
    
    
    
    <category term="code" scheme="https://wishlily.github.io/categories/code/"/>
    
    
    <category term="golang" scheme="https://wishlily.github.io/tags/golang/"/>
    
    <category term="draw" scheme="https://wishlily.github.io/tags/draw/"/>
    
    <category term="分形" scheme="https://wishlily.github.io/tags/%E5%88%86%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>牛顿迭代分形</title>
    <link href="https://wishlily.github.io/article/code/2017/03/30/undefined/"/>
    <id>https://wishlily.github.io/article/code/2017/03/30/undefined/</id>
    <published>2017-03-30T06:55:08.000Z</published>
    <updated>2017-03-30T06:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>牛顿迭代是求出多项式解的一种方法，也可以画出漂亮的分形图。</p><span id="more"></span><h1 id="牛顿迭代"><a href="#牛顿迭代" class="headerlink" title="牛顿迭代"></a>牛顿迭代</h1><p>过程就不写了，可查看注释，里面分析很清楚。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><br>公式：<br>$$ z_{n+1}&#x3D;z_n+\frac{f(z_n)}{f’(z_n)} $$</p><p>分形图则是根据以上公式在复平面上绘制的。</p><ul><li>确定想要绘制数据范围，如 $z&#x3D;a+bi,a\in[-1,1],b\in[-1,1]$</li><li>将复平面数据映射在画布上，如 x 轴为实部（a），y 轴为虚部（b）</li><li>画布上每个点进行牛顿迭代，当 $|z_{n+1}-z_n| &lt; 0.001$，即迭代到多项式一个解，根据迭代次数和靠近的解设置该点的颜色<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>刚发现 golang 语言原生支持复数运算，省了不少事。<br>以下以 $f(z)&#x3D;z^2+1$ 多项式为例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    _NEWTON_E       = <span class="hljs-number">0.001</span><br>    _NEWTON_MAP_MAX = <span class="hljs-number">3.0</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newton_f</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> <span class="hljs-type">complex128</span> &#123;<br>    f := z*z + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> f<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newton_df</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> <span class="hljs-type">complex128</span> &#123;<br>    df := <span class="hljs-number">2</span> * z<br>    <span class="hljs-keyword">return</span> df<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newton_iter</span><span class="hljs-params">(z <span class="hljs-type">complex128</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">255</span>; i += <span class="hljs-number">9</span> &#123;<br>        z1 := z - newton_f(z)/newton_df(z)<br>        <span class="hljs-keyword">if</span> cmplx.Abs(z1-z) &lt; _NEWTON_E &#123;<br>            <span class="hljs-keyword">return</span> i<br>        &#125;<br>        z = z1<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">255</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newton</span><span class="hljs-params">(img *image.RGBA, limit <span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; limit; i++ &#123;<br>        zx := _NEWTON_MAP_MAX*<span class="hljs-type">float64</span>(i)/<span class="hljs-type">float64</span>(limit) - _NEWTON_MAP_MAX/<span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; limit; j++ &#123;<br>            zy := _NEWTON_MAP_MAX*<span class="hljs-type">float64</span>(j)/<span class="hljs-type">float64</span>(limit) - _NEWTON_MAP_MAX/<span class="hljs-number">2</span><br>            gray := <span class="hljs-type">uint8</span>(newton_iter(<span class="hljs-built_in">complex</span>(zx, zy)))<br>            point(img, i, j, color.Gray&#123;gray&#125;)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test_newton</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    <span class="hljs-keyword">const</span> max_len = <span class="hljs-number">500</span><br>    img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, max_len, max_len))<br>    newton(img, max_len)<br>    f, _ := os.OpenFile(<span class="hljs-string">&quot;newton.png&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class="hljs-number">0600</span>)<br>    <span class="hljs-keyword">defer</span> f.Close()<br>    png.Encode(f, img)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://wishlily.github.io/images/article/code/2017/03/30/undefined/newton_x2+1.png"></p><h2 id="分形欣赏"><a href="#分形欣赏" class="headerlink" title="分形欣赏"></a>分形欣赏</h2><p>$f(z)&#x3D;z^3-1$<br><img src="https://wishlily.github.io/images/article/code/2017/03/30/undefined/newton_x3-1.png"></p><p>$f(z)&#x3D;z^8+15z^4-16$<br><img src="https://wishlily.github.io/images/article/code/2017/03/30/undefined/newton_x8+15x4-16.png"></p><p>$f(z)&#x3D;z^7+iz-1$<br><img src="https://wishlily.github.io/images/article/code/2017/03/30/undefined/newton_x7+ix-1.png"></p><h2 id="无心插柳"><a href="#无心插柳" class="headerlink" title="无心插柳"></a>无心插柳</h2><p>开始我不知道 golang 自带复数运算，所以自己写了个<del>错误的</del>，结果生成了意想不到的图片，也挺好看的。<br>颇有水墨之风 (≖‿ゝ≖)✧<br><img src="https://wishlily.github.io/images/article/code/2017/03/30/undefined/newton_err_2.png"><br><img src="https://wishlily.github.io/images/article/code/2017/03/30/undefined/newton_err_5.png"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.whitman.edu/Documents/Academics/Mathematics/burton.pdf">NEWTON’S METHOD AND FRACTALS</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.douban.com/note/230496472/?type=like#sep">经典的分形算法：牛顿迭代</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;牛顿迭代是求出多项式解的一种方法，也可以画出漂亮的分形图。&lt;/p&gt;</summary>
    
    
    
    <category term="code" scheme="https://wishlily.github.io/categories/code/"/>
    
    
    <category term="golang" scheme="https://wishlily.github.io/tags/golang/"/>
    
    <category term="draw" scheme="https://wishlily.github.io/tags/draw/"/>
    
    <category term="分形" scheme="https://wishlily.github.io/tags/%E5%88%86%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>Mandelbrot集</title>
    <link href="https://wishlily.github.io/article/code/2017/03/27/undefined/"/>
    <id>https://wishlily.github.io/article/code/2017/03/27/undefined/</id>
    <published>2017-03-27T01:57:34.000Z</published>
    <updated>2017-03-27T01:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>曼德博集合（Mandelbrot set）复平面上点的集合，和朱利亚集有些相似。<br>下面使用 golang 语言绘制一个曼德博集图。</p><span id="more"></span><h1 id="曼德博集1"><a href="#曼德博集1" class="headerlink" title="曼德博集1"></a>曼德博集<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h1><p>曼德博集合可以用复二次多项式来定义：$f_c(z) &#x3D; z^2 + c$，其中 $c$ 是一个复数参数。<br>从 $z &#x3D; 0$ 开始对 $f_c(z)$ 进行迭代，形成以下序列：<br>$$(0, f_c(0), f_c(f_c(0)), f_c(f_c(f_c(0))), \ldots)$$<br>不同的参数 $c$ 可能使序列的绝对值逐渐发散到无限大，也可能收敛在有限的区域内。<br>曼德博集合 $M$ 就是使序列不延伸至无限大的所有复数 $c$ 的集合。</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>曼德博集多项式和朱利亚集一致，只是朱利亚集给定 $c$，求 $z$ 集，而曼德博是给定 $z &#x3D; 0$，求 $c$ 集。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mandelbrot</span><span class="hljs-params">(img *image.RGBA, limit <span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-comment">// z = 0</span><br>    zx := <span class="hljs-number">0.0</span><br>    zy := <span class="hljs-number">0.0</span><br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; limit; i++ &#123;<br>        cx := <span class="hljs-type">float64</span>(<span class="hljs-number">3</span>*i)/<span class="hljs-type">float64</span>(limit) - <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; limit; j++ &#123;<br>            cy := <span class="hljs-type">float64</span>(<span class="hljs-number">3</span>*j)/<span class="hljs-type">float64</span>(limit) - <span class="hljs-number">1.5</span><br>            gray := <span class="hljs-type">uint8</span>(julia_divergent_grey(zx, zy, cx, cy))<br>            point(img, i, j, color.Gray&#123;gray&#125;)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>julia_divergent_grey</code> 是上一篇中绘制灰度函数，不在此复述。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test_mandelbrot</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    <span class="hljs-keyword">const</span> max_len = <span class="hljs-number">1000</span><br>    img := image.NewRGBA(image.Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, max_len, max_len))<br>    mandelbrot(img, max_len)<br>    f, _ := os.OpenFile(<span class="hljs-string">&quot;mandelbrot.png&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class="hljs-number">0600</span>)<br>    <span class="hljs-keyword">defer</span> f.Close()<br>    png.Encode(f, img)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://wishlily.github.io/images/article/code/2017/03/27/undefined/mandelbrot.png"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://zh.wikipedia.org/wiki/%E6%9B%BC%E5%BE%B7%E5%8D%9A%E9%9B%86%E5%90%88">维基百科：曼德博集合</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;曼德博集合（Mandelbrot set）复平面上点的集合，和朱利亚集有些相似。&lt;br&gt;下面使用 golang 语言绘制一个曼德博集图。&lt;/p&gt;</summary>
    
    
    
    <category term="code" scheme="https://wishlily.github.io/categories/code/"/>
    
    
    <category term="golang" scheme="https://wishlily.github.io/tags/golang/"/>
    
    <category term="draw" scheme="https://wishlily.github.io/tags/draw/"/>
    
    <category term="分形" scheme="https://wishlily.github.io/tags/%E5%88%86%E5%BD%A2/"/>
    
  </entry>
  
</feed>
